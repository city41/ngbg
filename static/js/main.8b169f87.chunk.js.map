{"version":3,"sources":["spriteTray/spriteTray.module.css","app.module.css","composeScreen/cropRect.module.css","spriteTray/spriteEntry.module.css","composeScreen/composeScreen.module.css","layers/group.module.css","composeScreen/extractedTile.module.css","emulator/emulator.module.css","layers/layer.module.css","layers/layers.module.css","composeScreen/extractedSprite.module.css","emulator/pauseOverlay.module.css","spriteTray/tile.module.css","spriteTray/sprite.module.css","composeScreen/layer.module.css","components/iconButton.module.css","layers/sprite.module.css","state/ids.ts","state/spriteUtil.ts","state/spriteData.ts","palette/neoGeoPalette.ts","state/extractSpriteGroup.ts","state/update.ts","state/undoableState.ts","state/state.ts","state/provider.tsx","state/renderTileToCanvas.ts","composeScreen/extractedTile.tsx","composeScreen/extractedSprite.tsx","SpriteGroupDragPreview.tsx","dragPreviewLayer.tsx","state/index.ts","emulator/chooseGameModal.tsx","emulator/pauseOverlay.tsx","emulator/emulator.tsx","spriteTray/tile.tsx","spriteTray/sprite.tsx","spriteTray/spriteEntry.tsx","spriteTray/spriteTray.tsx","state/jsgif/LZWEncoder.js","state/jsgif/NeuQuant.js","state/jsgif/GIFEncoder.js","state/layersToCanvas.ts","state/createGif.ts","gifBuilder/buildGifModal.tsx","composeScreen/layer.tsx","composeScreen/cropRect.tsx","composeScreen/composeScreen.tsx","components/iconButton.tsx","layers/sprite.tsx","layers/groupPreview.tsx","state/toDataUrl.ts","layers/group.tsx","layers/layerPreview.tsx","layers/layer.tsx","layers/layers.tsx","index.tsx","app.tsx"],"names":["module","exports","idCounter","getId","getMaxY","entities","tiles","arr","Array","isArray","length","reduce","b","s","concat","Math","max","map","t","composedY","getMinY","min","getMaxX","sprites","composedX","getMinX","moveSprites","diffX","diffY","baseX","sprite","moveTiles","moveGroups","groups","pauseId","group","pushDownOutOfNegative","layers","minY","getAllTilesFromLayers","layer","deltaY","moveSpritesY","getAllSpritesFromLayers","getAllTilesFromSprites","tile","extendGroupsViaMirroring","ss","rightMirror","maxX","spriteMemoryIndex","horizontalFlip","reverse","mirrorSpritesToRight","leftMirror","minX","width","mirrorSpritesToLeft","id","setGroupToZeroZero","setLayerToZeroZero","undefined","SCB1_SPRITE_SIZE_BYTES","SCB2_BYTE_OFFSET","SCB3_BYTE_OFFSET","SCB4_BYTE_OFFSET","getYSpriteSizeSticky","Error","spriteScb3Addr","window","Module","_get_tile_ram_addr","scb3Word","HEAPU8","sticky","spriteSize","y","rawY","yScale","fullmode","transformY","getScale","ignoreSticky","tileYs","push","getX","x","xScale","spriteScb4Addr","options","spriteScb2Addr","scb2Word","getSpriteData","tileRamAddr","spriteOffset","spriteData","i","tileData","w","firstWord","secondWord","tileIndex","autoAnimation","paletteIndex","verticalFlip","getTileData","COLORS_PER_PALETTE","PALETTE_SIZE_IN_BYTES","convertNeoGeoColorToRGBColor","col16","darkBit","getNeoGeoPalette","paletteMemoryIndex","palIndexInHeap","_get_current_pal_addr","HEAPU16","slice","convertNeoGeoPaletteToRGB","neoGeoPalette","mapped","convertTileDataToExtractedTile","rest","rgbPalette","extractSpriteAndStickyCompanionsToGroup","additionalProps","extractSpritesIntoGroup","rootSpriteIndex","spriteMemoryIndices","getSpriteGroup","smi","screenX","screenY","update","obj","collection","updates","o","rotateTiles","maxY","needsToWrap","wrapOffset","rotateSprites","reducer","state","action","nonUndoableState","type","newSpriteGroup","isAdhoc","find","l","hiddenLayers","oldSpriteGroups","filter","esg","a","aIndices","es","sort","bIndices","isEqual","haveSameSprites","newGroup","oldGroups","sameGroup","og","positionSpriteGroupInRelationToExistingGroups","newComposedX","some","g","currentSpriteGroup","sg","movedGroups","indexOf","without","newLayer","hidden","mirroredGroups","originalLayerIndex","deltaX","pushInOutOfNegative","allLayers","Infinity","rotateLayer","pushedLayer","initialState","past","present","future","hasStarted","isPaused","crop","showGrid","hiddenGroups","newState","nowPaused","pastCopy","newPresent","pop","futureCopy","stateContext","createContext","dispatchContext","Provider","children","useReducer","dispatch","value","0","1","2","3","4","5","6","7","getTileIndexedColorData","memoize","cromAddr","_get_rom_ctile_addr","tileOffset","TILE_SIZE_INTS","tileIndexData","pixelPair","leftPixelColorIndex","rightPixelColorIndex","renderTileToCanvas","canvas","indexedTileData","height","context","getContext","imageData","getImageData","pixel","data","putImageData","ExtractedTile","React","memo","tileY","outlined","horizontalScale","verticalScale","classes","classnames","styles","root","inlineStyle","transform","top","className","data-tileindex","ref","r","style","ExtractedSprite","autoAnimate","animationCounter","canDrag","outlineTiles","setYToZero","overrideX","useDrag","item","dragRef","preview","useEffect","getEmptyImage","captureDraggingState","key","left","gridTemplateRows","zIndex","StickySpriteGroupDragPreview","seedSpriteMemoryIndex","AdhocSpriteGroupDragPreview","DragPreviewLayer","useDragLayer","monitor","getItem","initialOffset","getInitialSourceClientOffset","currentOffset","getClientOffset","isDragging","spritesCmp","position","useAppState","useContext","rawState","undo","redo","canUndo","canRedo","loadFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","name","readAsArrayBuffer","addFileToVirtualFS","FS_createDataFile","Uint8Array","ChooseGameModal","useState","isOpen","setIsOpen","gameName","setGameName","process","biosLoaded","setBiosLoaded","e","target","files","startGame","replace","overrideGameName","argv","stackAlloc","HEAP32","allocateUTF8OnStack","_run_rom","console","log","onChange","PauseOverlay","onTogglePause","Icon","PlayArrow","Pause","onClick","title","Emulator","props","pauseOverlay","resumeMainLoop","pauseMainLoop","Tile","renderCanvas","Sprite","SpriteEntry","focused","index","spriteContainer","SpriteTray","focusedEntryIndices","setFocusedEntryIndices","shiftKeyStartEntryIndex","setShiftKeyStartEntryIndex","firstFillerRef","useRef","begin","divRef","current","getBoundingClientRect","floor","fei","spriteDatas","setDivRef","message","fill","_","d","ctrlKey","shiftKey","minIndex","maxIndex","minValue","maxValue","count","arrayFrom","locked","div","spriteEntries","gridTemplateColumns","filler","gridColumn","LZWEncoder","imgW","imgH","pixAry","initCodeSize","remaining","curPixel","n_bits","maxcode","g_init_bits","ClearCode","EOFCode","a_count","EOF","BITS","HSIZE","maxbits","maxmaxcode","htab","codetab","hsize","free_ent","clear_flg","cur_accum","cur_bits","masks","accum","pixels","color_depth","char_out","c","outs","flush_char","cl_block","cl_hash","output","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","encode","os","writeByte","writeBytes","code","apply","this","arguments","NeuQuant","alphadec","thepicture","lengthcount","samplefac","network","netsize","prime1","prime2","prime3","prime4","minpicturebytes","maxnetpos","netbiasshift","ncycles","intbiasshift","intbias","gammashift","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","netindex","bias","freq","radpower","thepic","len","sample","p","colorMap","k","j","inxbuild","smallpos","smallval","q","previouscol","startpos","learn","radius","rad","alpha","step","delta","samplepixels","pix","lim","contest","altersingle","alterneigh","unbiasnet","dist","bestd","best","lo","hi","m","n","biasdist","betafreq","bestpos","bestbiaspos","bestbiasd","GIFEncoder","chr","String","fromCharCode","ByteArray","bin","prototype","getData","v","val","writeUTFBytes","string","charCodeAt","array","offset","transIndex","out","image","indexedPixels","colorDepth","colorTab","transparent","repeat","delay","started","usedEntry","palSize","dispose","closeStream","firstFrame","sizeSet","comment","reset","setDelay","ms","round","setDispose","setRepeat","iter","setTransparent","setComment","addFrame","im","is_imageData","ok","ImageData","setSize","Uint8ClampedArray","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeCommentExt","writeImageDesc","writePixels","download","filename","endsWith","templink","document","createElement","href","URL","createObjectURL","Blob","click","finish","setFrameRate","fps","setQuality","quality","h","start","cont","nPix","nq","findClosest","minpos","dmin","dr","dg","db","transp","WriteShort","pValue","stream","setProperties","has_start","is_first","layersToCanvas","dimensions","getDimensions","forEach","layerSprites","tileCanvas","translateX","translateY","newCanvas","save","translate","scale","drawImage","restore","flip","fullCanvas","cropWidth","cropHeight","croppedCanvas","cropCanvas","FOREVER","createGif","onFrame","onFinish","encoder","totalFrames","validTiles","ts","validLayerTiles","lts","validSpriteTiles","sts","validTilesForSprite","maxAnimation","determineNumberOfFramesToRender","remainingFrames","binaryData","btoa","frameCanvas","setTimeout","clear","firstChild","removeChild","BuildGifModal","onRequestClose","containerRef","frameStatus","setFrameStatus","_get_neogeo_frame_counter_speed","frame","appendChild","dataUrl","img","Image","src","Layer","runPreview","spriteCmps","extractedSprite","extractedSprites","CropRect","topRowStyle","gridRow","leftCellStyle","cropStyle","containerStyle","mask","flex","ComposeScreen","animation","rafFrameCountdown","setAnimationCounter","setRunPreview","showBuildGifModal","setShowBuildGifModal","isCropping","setIsCropping","upperLeftCrop","setUpperLeftCrop","lowerRightCrop","setLowerRightCrop","frameCountdown","requestAnimationFrame","diff","useDrop","accept","drop","canDrop","dropRef","backgroundColor","neoGeoColor","asArray","neoGeoColorToCSS","palAddr","getBackdropNeoGeoColor","finalClassName","toolbar","disabled","bg","scrollWidth","scrollHeight","cropRect","captureLayer","onMouseDown","rect","rawX","clientX","clientY","onMouseMove","onMouseUp","IconButton","icon","role","aria-label","onDelete","Delete","GroupPreview","url","toDataURL","spriteGroupToDataUrl","imgWidth","imgHeight","alt","Group","onToggleVisibility","showSprites","setShowSprites","ExpandLess","ExpandMore","IoIosEyeOff","IoIosEye","LayerPreview","layerToDataUrl","onGroupDelete","onGroupToggleVisibility","onExtendViaMirror","onPushDown","showGroups","setShowGroups","IoIosReorder","IoIosPhoneLandscape","VerticalAlignBottom","Layers","buttonIcon","IoIosAdd","Modal","setAppElement","ReactDOM","render","backend","HTML5Backend","app","composeScreenTrayGrid","composeScreen","spriteTray","emulatorLayersGrid","emulator","getElementById"],"mappings":"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","file":"static/js/main.8b169f87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"spriteTray_root__1Sixf\",\"message\":\"spriteTray_message__21tFc\",\"spriteEntries\":\"spriteTray_spriteEntries__16oai\",\"filler\":\"spriteTray_filler__K67QZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\",\"composeScreenTrayGrid\":\"app_composeScreenTrayGrid__3746Z\",\"composeScreen\":\"app_composeScreen__1Kdh-\",\"spriteTray\":\"app_spriteTray__kqjfe\",\"emulatorLayersGrid\":\"app_emulatorLayersGrid__cLX2s\",\"emulator\":\"app_emulator__3kFZf\",\"layers\":\"app_layers__3kgZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"cropRect_root__LYSAR\",\"mask\":\"cropRect_mask__Vl5ZD\",\"crop\":\"cropRect_crop__2ev0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"spriteEntry_root__21-Rc\",\"index\":\"spriteEntry_index__3_j9A\",\"focused\":\"spriteEntry_focused__2e2R9\",\"spriteContainer\":\"spriteEntry_spriteContainer__3BESY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"composeScreen_root__3bwon\",\"toolbar\":\"composeScreen_toolbar__1QlS0\",\"bg\":\"composeScreen_bg__1xmrl\",\"captureLayer\":\"composeScreen_captureLayer__1AfVW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"group_root__1RKod\",\"toolbar\":\"group_toolbar__1l8sD\",\"spriteContainer\":\"group_spriteContainer__cQlrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"extractedTile_root__14wnu\",\"outlined\":\"extractedTile_outlined__1tGwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"emulator_root__3kH7Z\",\"pauseOverlay\":\"emulator_pauseOverlay__2scVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"layer_root__NdbK1\",\"toolbar\":\"layer_toolbar__1mN6V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"layers_root__1VIq8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"extractedSprite_root__gpe6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"pauseOverlay_root__1NZLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"tile_canvas__1tNqN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sprite\":\"sprite_sprite__38hI5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"layer_root__1yNTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"iconButton_root__J-591\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"sprite_root__1RSYf\"};","let idCounter = 1;\n\nexport function getId() {\n    return idCounter++;\n}\n","import {\n    ExtractedSpriteGroup,\n    ExtractedTile,\n    Layer,\n    ExtractedSprite\n} from \"./types\";\nimport { getId } from \"./ids\";\nimport { isEqual } from \"lodash\";\n\nfunction isExtractedSpriteArray(arr: unknown): arr is ExtractedSprite[] {\n    if (!Array.isArray(arr)) {\n        return false;\n    }\n\n    if (arr.length === 0) {\n        return true;\n    }\n\n    if (\"composedX\" in arr[0]) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getMaxY(entities: ExtractedTile[] | ExtractedSprite[]): number {\n    let tiles: ExtractedTile[];\n\n    if (isExtractedSpriteArray(entities)) {\n        tiles = entities.reduce<ExtractedTile[]>(\n            (b, s) => b.concat(s.tiles),\n            []\n        );\n    } else {\n        tiles = entities;\n    }\n\n    if (tiles.length === 0) {\n        return 0;\n    }\n\n    return Math.max(...tiles.map(t => t.composedY));\n}\n\nexport function getMinY(tiles: ExtractedTile[]): number {\n    if (tiles.length === 0) {\n        return 0;\n    }\n\n    return Math.min(...tiles.map(s => s.composedY));\n}\n\nexport function getMaxX(sprites: ExtractedSprite[]): number {\n    if (sprites.length === 0) {\n        return 0;\n    }\n\n    return Math.max(...sprites.map(s => s.composedX));\n}\n\nexport function getMinX(sprites: ExtractedSprite[]): number {\n    if (sprites.length === 0) {\n        return 0;\n    }\n\n    return Math.min(...sprites.map(s => s.composedX));\n}\n\n/**\n * Determines if two sprite groups have the same sprites.\n *\n * Note this is not a deterministic check, as video ram changes all the time.\n * This is only a safe check if both sprite groups have the same pauseId\n */\nexport function haveSameSprites(\n    a: ExtractedSpriteGroup,\n    b: ExtractedSpriteGroup\n) {\n    const aIndices = a.sprites.map(es => es.spriteMemoryIndex).sort();\n    const bIndices = b.sprites.map(es => es.spriteMemoryIndex).sort();\n\n    return isEqual(aIndices, bIndices);\n}\n\n/**\n * Given a newly formed sprite group, if there are other sprite groups already from the same pauseId,\n * then position this new group relative to them. This makes it so the user doesn't have to try and manually\n * line up groups.\n *\n * example: Samurai Shodown title screen. User drags in background, then drags in \"Samurai\" sprite, the \"Samurai\"\n * sprite will position itself properly on top of the background\n */\nexport function positionSpriteGroupInRelationToExistingGroups(\n    newGroup: ExtractedSpriteGroup,\n    oldGroups: ExtractedSpriteGroup[]\n): ExtractedSpriteGroup {\n    const sameGroup = oldGroups.find(og => og.pauseId === newGroup.pauseId);\n\n    // first sprite from this pauseId? Then there is nothing to position\n    if (!sameGroup) {\n        return newGroup;\n    }\n\n    const diffX = sameGroup.sprites[0].composedX - sameGroup.sprites[0].screenX;\n\n    return {\n        ...newGroup,\n        sprites: moveSprites(newGroup.sprites, diffX, 0, \"screenX\")\n    };\n}\n\nfunction moveSprites(\n    sprites: ExtractedSprite[],\n    diffX: number,\n    diffY: number,\n    baseX: \"composedX\" | \"screenX\" = \"composedX\"\n): ExtractedSprite[] {\n    return sprites.map(sprite => {\n        return {\n            ...sprite,\n            composedX: sprite[baseX] + diffX,\n            tiles: diffY === 0 ? sprite.tiles : moveTiles(sprite.tiles, diffY)\n        };\n    });\n}\n\nexport function moveGroups(\n    groups: ExtractedSpriteGroup[],\n    diffX: number,\n    diffY: number,\n    pauseId: number | undefined\n): ExtractedSpriteGroup[] {\n    return groups.map(group => {\n        if (typeof pauseId === \"number\" && group.pauseId !== pauseId) {\n            return group;\n        }\n\n        return {\n            ...group,\n            sprites: moveSprites(group.sprites, diffX, diffY)\n        };\n    });\n}\n\n/**\n * When the compose window ends up with sprites that are up in the negative region,\n * this method causes all sprites to move down such that no sprites have a\n * negative y coordinate\n */\nexport function pushDownOutOfNegative(layers: Layer[]): Layer[] {\n    const tiles = getAllTilesFromLayers(layers);\n    const minY = getMinY(tiles);\n\n    if (minY >= 0) {\n        return layers;\n    }\n\n    return layers.map(layer => {\n        return {\n            ...layer,\n            groups: moveGroupsY(layer.groups, minY * -1)\n        };\n    });\n}\n\nexport function getAllTilesFromLayers(layers: Layer[]): ExtractedTile[] {\n    const sprites = getAllSpritesFromLayers(layers);\n\n    return sprites.reduce<ExtractedTile[]>((tiles, sprite) => {\n        return tiles.concat(sprite.tiles);\n    }, []);\n}\n\nexport function getAllSpritesFromLayers(layers: Layer[]): ExtractedSprite[] {\n    return layers.reduce<ExtractedSprite[]>((sprites, layer) => {\n        return sprites.concat(getAllSpritesFromGroups(layer.groups));\n    }, []);\n}\n\nfunction getAllSpritesFromGroups(\n    groups: ExtractedSpriteGroup[]\n): ExtractedSprite[] {\n    return groups.reduce<ExtractedSprite[]>((sprites, group) => {\n        return sprites.concat(group.sprites);\n    }, []);\n}\n\nexport function getAllTilesFromGroups(\n    groups: ExtractedSpriteGroup[]\n): ExtractedTile[] {\n    return groups.reduce<ExtractedTile[]>((tiles, group) => {\n        return tiles.concat(getAllTilesFromSprites(group.sprites));\n    }, []);\n}\n\nfunction getAllTilesFromSprites(sprites: ExtractedSprite[]): ExtractedTile[] {\n    return sprites.reduce<ExtractedTile[]>((tiles, sprite) => {\n        return tiles.concat(sprite.tiles);\n    }, []);\n}\n\nfunction moveGroupsY(\n    groups: ExtractedSpriteGroup[],\n    deltaY: number\n): ExtractedSpriteGroup[] {\n    return groups.map(group => {\n        return {\n            ...group,\n            sprites: moveSpritesY(group.sprites, deltaY)\n        };\n    });\n}\n\nfunction moveSpritesY(\n    sprites: ExtractedSprite[],\n    deltaY: number\n): ExtractedSprite[] {\n    return sprites.map(sprite => {\n        return {\n            ...sprite,\n            tiles: moveTiles(sprite.tiles, deltaY)\n        };\n    });\n}\n\nfunction moveTiles(tiles: ExtractedTile[], deltaY: number): ExtractedTile[] {\n    return tiles.map(tile => {\n        return {\n            ...tile,\n            composedY: tile.composedY + deltaY\n        };\n    });\n}\n\n/**\n * When sprites end up with negative x coordinates (most commonly after\n * extending a layer via mirroring), this method will push all sprites to the right\n * such that no sprite has a negative x coordinate\n */\nexport function pushInOutOfNegative(layers: Layer[]): Layer[] {\n    const sprites = getAllSpritesFromLayers(layers);\n    const minX = getMinX(sprites);\n\n    if (minX >= 0) {\n        return layers;\n    }\n\n    return layers.map(layer => {\n        return {\n            ...layer,\n            groups: moveGroupsX(layer.groups, minX * -1)\n        };\n    });\n}\n\nfunction moveGroupsX(\n    groups: ExtractedSpriteGroup[],\n    deltaX: number\n): ExtractedSpriteGroup[] {\n    return groups.map(group => {\n        return {\n            ...group,\n            sprites: moveSprites(group.sprites, deltaX, 0)\n        };\n    });\n}\n\n/**\n * Given a set of sprites, creates a mirror copy of them that is on the right side.\n * The mirroring is always on the y axis\n */\nfunction mirrorSpritesToRight(sprites: ExtractedSprite[]): ExtractedSprite[] {\n    const maxX = getMaxX(sprites);\n\n    return sprites\n        .map(sprite => {\n            return {\n                ...sprite,\n                spriteMemoryIndex: sprite.spriteMemoryIndex,\n                composedX: 2 * maxX - (sprite.composedX + 16),\n                tiles: sprite.tiles.map(t => {\n                    return {\n                        ...t,\n                        horizontalFlip: !t.horizontalFlip\n                    };\n                })\n            };\n        })\n        .reverse();\n}\n\n/**\n * Given a set of sprites, creates a mirror copy of them that is on the left side.\n * The mirroring is always on the y axis\n */\nfunction mirrorSpritesToLeft(sprites: ExtractedSprite[]): ExtractedSprite[] {\n    const minX = getMinX(sprites);\n    const maxX = getMaxX(sprites) + 16;\n    const width = maxX - minX;\n\n    return sprites\n        .map(sprite => {\n            return {\n                ...sprite,\n                spriteMemoryIndex: sprite.spriteMemoryIndex,\n                composedX: minX - width + (maxX - (sprite.composedX + 16)),\n                tiles: sprite.tiles.map(t => {\n                    return {\n                        ...t,\n                        horizontalFlip: !t.horizontalFlip\n                    };\n                })\n            };\n        })\n        .reverse();\n}\n\n/**\n * Given a set of groups, mirrors them on both sides. The mirrored sprites\n * get lumped into a right and left group\n */\nexport function extendGroupsViaMirroring(\n    groups: ExtractedSpriteGroup[],\n    pauseId: number\n): ExtractedSpriteGroup[] {\n    const sprites = groups.reduce<ExtractedSprite[]>((ss, group) => {\n        return ss.concat(group.sprites);\n    }, []);\n\n    const rightMirror = mirrorSpritesToRight(sprites);\n    const leftMirror = mirrorSpritesToLeft(sprites);\n\n    const newLeftGroup = {\n        id: getId(),\n        pauseId,\n        sprites: leftMirror\n    };\n\n    const newRightGroup = {\n        id: getId(),\n        pauseId,\n        sprites: rightMirror\n    };\n\n    return [newLeftGroup, newRightGroup];\n}\n\nexport function setGroupToZeroZero(\n    group: ExtractedSpriteGroup\n): ExtractedSpriteGroup {\n    const minX = getMinX(group.sprites);\n    const minY = getMinY(getAllTilesFromSprites(group.sprites));\n\n    if (minX === 0 && minY === 0) {\n        return group;\n    }\n\n    return {\n        ...group,\n        sprites: moveSprites(group.sprites, -minX, -minY)\n    };\n}\n\nexport function setLayerToZeroZero(layer: Layer): Layer {\n    const minX = getMinX(getAllSpritesFromLayers([layer]));\n    const minY = getMinY(getAllTilesFromLayers([layer]));\n\n    if (minX === 0 && minY === 0) {\n        return layer;\n    }\n\n    const groups = moveGroups(layer.groups, -minX, -minY, undefined);\n\n    return {\n        ...layer,\n        groups\n    };\n}\n","// ALERT!\n// vram addresses in the neo geo are word wide, not byte wide!\n// TODO: can probably just use HEAPU16 and make this all much simpler\n// ALERT!\n\n// in SCB1,\n// each sprite has 64, 16-bit, words\nconst SCB1_SPRITE_SIZE_BYTES = 64 * 2;\n\n// it starts at word $8000, so *2 to get byte address\nconst SCB2_BYTE_OFFSET = 0x8000 * 2;\n\n// it starts at word $8200, so *2 to get byte address\nconst SCB3_BYTE_OFFSET = 0x8200 * 2;\n\n// it starts at word $8400, so *2 to get byte address\nconst SCB4_BYTE_OFFSET = 0x8400 * 2;\n\nexport interface TileData {\n    y: number;\n    tileIndex: number;\n    paletteIndex: number;\n    horizontalFlip: boolean;\n    verticalFlip: boolean;\n    autoAnimation: 0 | 2 | 3;\n}\n\nexport interface SpriteData {\n    spriteMemoryIndex: number;\n    tiles: TileData[];\n    x: number;\n    y: number;\n    sticky: boolean;\n    spriteSize: number;\n}\n\nfunction getTileData(\n    spriteMemoryIndex: number,\n    spriteSize: number,\n    tileYs: number[]\n): TileData[] {\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const spriteOffset = SCB1_SPRITE_SIZE_BYTES * spriteMemoryIndex;\n\n    const spriteData: number[] = [];\n\n    for (let i = 0; i < spriteSize * 4; ++i) {\n        spriteData[i] = window.HEAPU8[tileRamAddr + spriteOffset + i];\n    }\n\n    const tileData = [];\n\n    for (let w = 0; w < spriteData.length; w += 4) {\n        const firstWord = spriteData[w] | (spriteData[w + 1] << 8);\n        const secondWord = spriteData[w + 2] | (spriteData[w + 3] << 8);\n\n        // first word = least sig bits of tile index\n        // second word, bits 4 through 7 = most sig bits of tile index\n        let tileIndex = firstWord | (((secondWord >> 4) & 0xf) << 16);\n\n        let autoAnimation: 0 | 2 | 3 = 0;\n\n        // automatic animation\n        if (secondWord & 0x8) {\n            autoAnimation = 3;\n        } else if (secondWord & 0x4) {\n            autoAnimation = 2;\n        }\n\n        // top half of second word is the palette index\n        const paletteIndex = (secondWord >> 8) & 0xff;\n\n        const horizontalFlip = !!(secondWord & 1);\n        const verticalFlip = !!(secondWord & 2);\n\n        tileData.push({\n            y: tileYs[w / 4],\n            tileIndex,\n            paletteIndex,\n            horizontalFlip,\n            verticalFlip,\n            autoAnimation\n        });\n    }\n\n    return tileData;\n}\n\nfunction transformY(rawY: number, yScale: number, spriteSize: number): number {\n    let fullmode;\n\n    if (spriteSize === 0x20) {\n        fullmode = 1;\n    } else if (spriteSize >= 0x21) {\n        fullmode = 2;\n    } else {\n        fullmode = 0;\n    }\n\n    // getting the final screen y is very complicated and\n    // honestly don't fully understand it. This code was copied\n    // from gngeo, video.c#draw_screen()\n    let y = 0x200 - rawY;\n\n    if (y > 0x110) {\n        y -= 0x200;\n    }\n\n    if (fullmode === 2 || (fullmode === 1 && yScale === 0xff)) {\n        while (y < 0) {\n            y += (yScale + 1) << 1;\n        }\n    }\n\n    return y;\n}\n\nfunction getYSpriteSizeSticky(\n    spriteMemoryIndex: number\n): { y: number; tileYs: number[]; spriteSize: number; sticky: boolean } {\n    if (spriteMemoryIndex < 0) {\n        throw new Error(\"getYSpriteSizeSticky: sprite index under zero!\");\n    }\n\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const scb3StartAddr = tileRamAddr + SCB3_BYTE_OFFSET;\n\n    const spriteScb3Addr = scb3StartAddr + spriteMemoryIndex * 2;\n\n    const scb3Word =\n        window.HEAPU8[spriteScb3Addr] |\n        (window.HEAPU8[spriteScb3Addr + 1] << 8);\n\n    const sticky = !!((scb3Word >> 6) & 1);\n\n    if (sticky) {\n        return {\n            ...getYSpriteSizeSticky(spriteMemoryIndex - 1),\n            sticky\n        };\n    } else {\n        const yScale = getScale(spriteMemoryIndex, { ignoreSticky: true })\n            .yScale;\n        const spriteSize = scb3Word & 0x3f;\n        const rawY = scb3Word >> 7;\n\n        const y = transformY(rawY, yScale, spriteSize);\n        const tileYs = [];\n\n        for (let t = 0; t < spriteSize; ++t) {\n            tileYs.push((y + 16 * t) % 512);\n        }\n\n        return { y, tileYs, spriteSize, sticky };\n    }\n}\n\nfunction getX(spriteMemoryIndex: number): number {\n    if (spriteMemoryIndex < 0) {\n        throw new Error(\"getX: sprite index under zero!\");\n    }\n\n    const sticky = getYSpriteSizeSticky(spriteMemoryIndex).sticky;\n\n    let x;\n\n    if (sticky) {\n        const xScale = getScale(spriteMemoryIndex).xScale;\n        x = getX(spriteMemoryIndex - 1) + xScale;\n    } else {\n        const tileRamAddr = window.Module._get_tile_ram_addr();\n        const scb4StartAddr = tileRamAddr + SCB4_BYTE_OFFSET;\n\n        const spriteScb4Addr = scb4StartAddr + spriteMemoryIndex * 2;\n\n        const scb4Word =\n            window.HEAPU8[spriteScb4Addr] |\n            (window.HEAPU8[spriteScb4Addr + 1] << 8);\n\n        x = scb4Word >> 7;\n    }\n\n    if (x >= 0x1f0) {\n        x -= 0x200;\n    }\n\n    return x;\n}\n\nfunction getScale(\n    spriteMemoryIndex: number,\n    options?: { ignoreSticky: boolean }\n): { yScale: number; xScale: number } {\n    if (spriteMemoryIndex < 0) {\n        throw new Error(\"getScale: sprite index under zero!\");\n    }\n\n    if (!options || !options.ignoreSticky) {\n        const sticky = getYSpriteSizeSticky(spriteMemoryIndex).sticky;\n\n        if (sticky) {\n            return getScale(spriteMemoryIndex - 1);\n        }\n    }\n\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const scb2StartAddr = tileRamAddr + SCB2_BYTE_OFFSET;\n    const spriteScb2Addr = scb2StartAddr + spriteMemoryIndex * 2;\n\n    const scb2Word =\n        window.HEAPU8[spriteScb2Addr] |\n        (window.HEAPU8[spriteScb2Addr + 1] << 8);\n\n    const yScale = scb2Word & 0xff;\n    const xScale = ((scb2Word >> 8) & 0xf) + 1;\n\n    return { yScale, xScale };\n}\n\nexport function getSpriteData(spriteMemoryIndex: number): SpriteData {\n    const { sticky, y, tileYs, spriteSize } = getYSpriteSizeSticky(\n        spriteMemoryIndex\n    );\n\n    const tiles = getTileData(spriteMemoryIndex, spriteSize, tileYs);\n\n    return {\n        spriteMemoryIndex,\n        tiles,\n        x: getX(spriteMemoryIndex),\n        sticky,\n        y,\n        spriteSize\n    };\n}\n\nexport function isSpriteEmpty(spriteMemoryIndex: number): boolean {\n    return getYSpriteSizeSticky(spriteMemoryIndex).spriteSize === 0;\n}\n","// each palette has 16 colors, each color is a 16 bit rgb value\nconst COLORS_PER_PALETTE = 16;\nconst PALETTE_SIZE_IN_BYTES = COLORS_PER_PALETTE * 2;\n\n/**\n * Convert from a neo geo palette color to a 32 rgb color\n * https://wiki.neogeodev.org/index.php?title=Colors\n */\nfunction convertNeoGeoColorToRGBColor(\n    col16: number\n): [number, number, number, number] {\n    // the least significant bit is shared by each channel\n    // if it is zero, the entire color is a tad darker, hence the name \"dark bit\"\n    const darkBit = (col16 >> 15) & 1;\n\n    const upperB = (col16 & 0xf) << 2;\n    const lowerB = ((col16 >> 12) & 1) << 1;\n    const b5 = upperB | lowerB | darkBit;\n\n    const upperG = ((col16 >> 4) & 0xf) << 2;\n    const lowerG = ((col16 >> 13) & 1) << 1;\n    const g5 = upperG | lowerG | darkBit;\n\n    const upperR = ((col16 >> 8) & 0xf) << 2;\n    const lowerR = ((col16 >> 14) & 1) << 1;\n    const r5 = upperR | lowerR | darkBit;\n\n    // neo geo color channels are six bits (max value of 63), but need to map\n    // them to a 8 bit color channel (max value of 255)\n    const b = (b5 / 63) * 255;\n    const g = (g5 / 63) * 255;\n    const r = (r5 / 63) * 255;\n\n    return [r, g, b, 255];\n}\n\nexport function getNeoGeoPalette(paletteMemoryIndex: number): number[] {\n    const palAddr = window.Module._get_current_pal_addr();\n    const palOffset = paletteMemoryIndex * PALETTE_SIZE_IN_BYTES;\n    const palIndexInHeap = (palAddr + palOffset) / 2;\n\n    return [\n        ...window.Module.HEAPU16.slice(\n            palIndexInHeap,\n            palIndexInHeap + COLORS_PER_PALETTE\n        )\n    ];\n}\n\nexport function convertNeoGeoPaletteToRGB(\n    neoGeoPalette: number[]\n): Array<[number, number, number, number]> {\n    const mapped = neoGeoPalette.map(convertNeoGeoColorToRGBColor);\n\n    // the first color is always transparent\n    return [[0, 0, 0, 0], ...mapped.slice(1)];\n}\n\nexport function getRgbFromNeoGeoPalette(\n    paletteIndex: number,\n    colorIndex: number\n): number[] {\n    if (colorIndex === 0) {\n        return [0, 0, 0, 0];\n    }\n\n    const palAddr = window.Module._get_current_pal_addr();\n    const palOffset = paletteIndex * PALETTE_SIZE_IN_BYTES;\n    const colorOffset = colorIndex * 2;\n\n    const color: number[] = [];\n\n    for (let i = 0; i < 2; ++i) {\n        color[i] = window.HEAPU8[palAddr + palOffset + colorOffset + i];\n    }\n\n    const combinedColor = color[0] | (color[1] << 8);\n\n    return convertNeoGeoColorToRGBColor(combinedColor);\n}\n\nexport function getBackdropNeoGeoColor(): number {\n    let palAddr = window.Module._get_current_pal_addr();\n\n    // get to the final color in all the palettes, ie the backdrop color\n    // https://wiki.neogeodev.org/index.php?title=Palettes\n    palAddr += 0x1ffe;\n\n    // since we are going to use HEAPU16, divide the address by two\n    palAddr /= 2;\n\n    return window.Module.HEAPU16[palAddr];\n}\n\nexport function neoGeoColorToCSS(neoGeoColor: number): string {\n    const asArray = convertNeoGeoColorToRGBColor(neoGeoColor);\n\n    return `rgb(${asArray[0]}, ${asArray[1]}, ${asArray[2]})`;\n}\n","import { ExtractedSpriteGroup, ExtractedSprite, ExtractedTile } from \"./types\";\nimport { getSpriteData, TileData } from \"./spriteData\";\nimport {\n    getNeoGeoPalette,\n    convertNeoGeoPaletteToRGB\n} from \"../palette/neoGeoPalette\";\nimport { getId } from \"./ids\";\n\nfunction convertTileDataToExtractedTile(tileData: TileData): ExtractedTile {\n    const { y, paletteIndex, ...rest } = tileData;\n    const neoGeoPalette = getNeoGeoPalette(tileData.paletteIndex);\n    const rgbPalette = convertNeoGeoPaletteToRGB(neoGeoPalette);\n\n    return {\n        ...rest,\n        composedY: y,\n        neoGeoPalette,\n        rgbPalette\n    };\n}\n\nexport function getSpriteGroup(spriteMemoryIndex: number): number[] {\n    let rootSpriteIndex = spriteMemoryIndex;\n\n    let spriteData = getSpriteData(rootSpriteIndex);\n\n    while (spriteData.sticky && rootSpriteIndex > 0) {\n        rootSpriteIndex -= 1;\n        spriteData = getSpriteData(rootSpriteIndex);\n    }\n\n    const spriteMemoryIndices = [];\n\n    do {\n        spriteMemoryIndices.push(rootSpriteIndex);\n        rootSpriteIndex += 1;\n        spriteData = getSpriteData(rootSpriteIndex);\n    } while (spriteData.sticky);\n\n    return spriteMemoryIndices;\n}\n\nexport function extractSpriteAndStickyCompanionsToGroup(\n    spriteMemoryIndex: number,\n    composedX: number,\n    pauseId: number,\n    additionalProps: Partial<ExtractedSprite> = {}\n): ExtractedSpriteGroup {\n    const allSpriteMemoryIndices = getSpriteGroup(spriteMemoryIndex);\n\n    return extractSpritesIntoGroup(\n        allSpriteMemoryIndices,\n        composedX,\n        pauseId,\n        additionalProps\n    );\n}\n\nexport function extractSpritesIntoGroup(\n    spriteMemoryIndices: number[],\n    composedX: number,\n    pauseId: number,\n    additionalProps: Partial<ExtractedSprite> = {}\n): ExtractedSpriteGroup {\n    const sprites: ExtractedSprite[] = spriteMemoryIndices.map((smi, i) => {\n        const spriteData = getSpriteData(smi);\n        return {\n            ...additionalProps,\n            pauseId,\n            spriteMemoryIndex: smi,\n            tiles: spriteData.tiles.map(convertTileDataToExtractedTile),\n            screenX: spriteData.x,\n            screenY: spriteData.y,\n            composedX: composedX + i * 16,\n            composedY: spriteData.y\n        };\n    }) as ExtractedSprite[];\n\n    const group: ExtractedSpriteGroup = {\n        id: getId(),\n        pauseId,\n        sprites\n    };\n\n    return group;\n}\n","export function update<T>(obj: T, collection: T[], updates: Partial<T>) {\n    return collection.map(o => {\n        if (o === obj) {\n            return {\n                ...obj,\n                ...updates\n            };\n        } else {\n            return o;\n        }\n    });\n}\n","import {\n    AppState,\n    Layer,\n    ExtractedSpriteGroup,\n    ExtractedSprite,\n    ExtractedTile\n} from \"./types\";\nimport {\n    extendGroupsViaMirroring,\n    haveSameSprites,\n    moveGroups,\n    positionSpriteGroupInRelationToExistingGroups,\n    pushDownOutOfNegative,\n    pushInOutOfNegative,\n    getAllTilesFromLayers\n} from \"./spriteUtil\";\nimport {\n    extractSpriteAndStickyCompanionsToGroup,\n    extractSpritesIntoGroup\n} from \"./extractSpriteGroup\";\nimport { NonUndoableState } from \"./state\";\nimport { getId } from \"./ids\";\nimport { update } from \"./update\";\nimport { without } from \"lodash\";\n\nexport type UndoableAction =\n    | {\n          type: \"ExtractSprite\";\n          spriteMemoryIndex: number;\n          composedX: number;\n      }\n    | {\n          type: \"ExtractSpritesToGroup\";\n          spriteMemoryIndices: number[];\n          composedX: number;\n      }\n    | {\n          type: \"MoveSprite\";\n          spriteMemoryIndex: number;\n          newComposedX: number;\n          pauseId: number;\n      }\n    | { type: \"DeleteGroup\"; group: ExtractedSpriteGroup }\n    | { type: \"NewLayer\" }\n    | { type: \"DeleteLayer\"; layer: Layer }\n    | { type: \"ExtendLayerViaMirror\"; layer: Layer }\n    | {\n          type: \"RemoveSpriteFromExtractedGroup\";\n          group: ExtractedSpriteGroup;\n          sprite: ExtractedSprite;\n      }\n    | { type: \"RotateLayer\"; layer: Layer }\n    | { type: \"PushDownLayer\"; layer: Layer }\n    | { type: \"PushAllDown\" };\n\nexport const initialState: AppState = {\n    layers: []\n};\n\nfunction rotateTiles(\n    tiles: ExtractedTile[],\n    minY: number,\n    maxY: number\n): ExtractedTile[] {\n    if (tiles.length === 0) {\n        return tiles;\n    }\n\n    return tiles.map(tile => {\n        // if the tile is beyond maxY, then it is not on a 16px boundary.\n        // so when it wraps to the top, need to offset it from minY to maintain\n        // its position\n        const needsToWrap = tile.composedY >= maxY;\n        const wrapOffset = tile.composedY - maxY;\n\n        const newY = needsToWrap ? minY + wrapOffset : tile.composedY + 16;\n\n        return {\n            ...tile,\n            composedY: newY\n        };\n    });\n}\n\nfunction rotateSprites(\n    sprites: ExtractedSprite[],\n    minY: number,\n    maxY: number\n): ExtractedSprite[] {\n    return sprites.map(sprite => {\n        return {\n            ...sprite,\n            tiles: rotateTiles(sprite.tiles, minY, maxY)\n        };\n    });\n}\n\nfunction rotateLayer(layer: Layer, allLayers: Layer[]): Layer {\n    const tiles = getAllTilesFromLayers(allLayers);\n\n    // when wrapping, we only want to wrap on a 16 pixel boundary.\n    // To accomplish that, find min/max tiles that are on the boundary. Tiles that are off the boundary\n    // (typically small sprites on top of a background sprite), let them hang over when wrapping\n    const minY = tiles.reduce((minY, tile) => {\n        if (tile.composedY < minY && tile.composedY % 16 === 0) {\n            return tile.composedY;\n        } else {\n            return minY;\n        }\n    }, Infinity);\n\n    if (minY === Infinity) {\n        return layer;\n    }\n\n    const maxY = tiles.reduce((maxY, tile) => {\n        if (tile.composedY > maxY && tile.composedY % 16 === 0) {\n            return tile.composedY;\n        } else {\n            return maxY;\n        }\n    }, -Infinity);\n\n    if (maxY === -Infinity) {\n        return layer;\n    }\n\n    const groups = layer.groups.map(group => {\n        return {\n            ...group,\n            sprites: rotateSprites(group.sprites, minY, maxY)\n        };\n    });\n\n    return {\n        ...layer,\n        groups\n    };\n}\n\nexport function reducer(\n    state: AppState,\n    action: UndoableAction,\n    nonUndoableState: NonUndoableState\n): AppState {\n    switch (action.type) {\n        case \"ExtractSpritesToGroup\":\n        case \"ExtractSprite\": {\n            let newSpriteGroup: ExtractedSpriteGroup;\n\n            if (\"spriteMemoryIndex\" in action) {\n                const { spriteMemoryIndex, composedX } = action;\n\n                newSpriteGroup = extractSpriteAndStickyCompanionsToGroup(\n                    spriteMemoryIndex,\n                    composedX,\n                    nonUndoableState.pauseId\n                );\n            } else {\n                const { spriteMemoryIndices, composedX } = action;\n\n                newSpriteGroup = extractSpritesIntoGroup(\n                    spriteMemoryIndices,\n                    composedX,\n                    nonUndoableState.pauseId,\n                    { isAdhoc: true }\n                );\n            }\n\n            const layer = [...state.layers]\n                .reverse()\n                .find(l => !nonUndoableState.hiddenLayers[l.id]) || {\n                id: getId(),\n                groups: [newSpriteGroup]\n            };\n\n            const oldSpriteGroups = layer.groups.filter(\n                esg =>\n                    esg.pauseId !== newSpriteGroup.pauseId ||\n                    !haveSameSprites(esg, newSpriteGroup)\n            );\n\n            newSpriteGroup = positionSpriteGroupInRelationToExistingGroups(\n                newSpriteGroup,\n                oldSpriteGroups\n            );\n\n            let layers;\n\n            if (state.layers.length === 0) {\n                layers = [layer];\n            } else {\n                layers = update(layer, state.layers, {\n                    groups: [...layer.groups, newSpriteGroup]\n                });\n            }\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"MoveSprite\": {\n            const { spriteMemoryIndex, newComposedX, pauseId } = action;\n\n            const layer = state.layers.find(l => {\n                return l.groups.some(g => {\n                    return g.sprites.some(s => {\n                        return (\n                            s.spriteMemoryIndex === spriteMemoryIndex &&\n                            s.pauseId === pauseId\n                        );\n                    });\n                });\n            });\n\n            if (!layer) {\n                return state;\n            }\n\n            const currentSpriteGroup = layer.groups.find(sg => {\n                return (\n                    sg.pauseId === pauseId &&\n                    sg.sprites.some(\n                        s => s.spriteMemoryIndex === spriteMemoryIndex\n                    )\n                );\n            });\n\n            if (!currentSpriteGroup) {\n                return state;\n            }\n\n            const diffX =\n                newComposedX - currentSpriteGroup.sprites[0].composedX;\n            const movedGroups = moveGroups(layer.groups, diffX, 0, pauseId);\n\n            return {\n                ...state,\n                layers: update(layer, state.layers, {\n                    groups: movedGroups\n                })\n            };\n        }\n\n        case \"DeleteGroup\": {\n            const { group } = action;\n            const layer = state.layers.find(\n                layer => layer.groups.indexOf(group) > -1\n            );\n\n            if (!layer) {\n                throw new Error(\n                    \"DeleteGroup: can't find the layer this group belongs to\"\n                );\n            }\n\n            const groups = without(layer.groups, group);\n            const layers = update(layer, state.layers, { groups });\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"NewLayer\": {\n            const newLayer = {\n                id: getId(),\n                groups: [],\n                hidden: false\n            };\n\n            return {\n                ...state,\n                layers: [...state.layers, newLayer]\n            };\n        }\n\n        case \"DeleteLayer\": {\n            const { layer } = action;\n\n            return {\n                ...state,\n                layers: state.layers.filter(l => l !== layer)\n            };\n        }\n\n        case \"ExtendLayerViaMirror\": {\n            const { layer } = action;\n\n            // don't bother to mirror an empty layer\n            if (layer.groups.length === 0) {\n                return state;\n            }\n\n            const mirroredGroups = extendGroupsViaMirroring(\n                layer.groups,\n                nonUndoableState.pauseId\n            );\n\n            const newLayer = {\n                id: getId(),\n                groups: mirroredGroups,\n                hidden: false\n            };\n\n            const originalLayerIndex = state.layers.indexOf(layer);\n\n            let layers;\n\n            if (originalLayerIndex === 0) {\n                layers = [newLayer, ...state.layers];\n            } else {\n                layers = [\n                    ...state.layers.slice(0, originalLayerIndex - 1),\n                    newLayer,\n                    ...state.layers.slice(originalLayerIndex - 1)\n                ];\n            }\n\n            layers = pushInOutOfNegative(layers);\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"RemoveSpriteFromExtractedGroup\": {\n            const { group, sprite } = action;\n\n            const layer = state.layers.find(\n                layer => layer.groups.indexOf(group) > -1\n            );\n\n            if (!layer) {\n                throw new Error(\n                    \"RemoveSpriteFromExtractedGroup: cant find layer for group\"\n                );\n            }\n\n            const groups = update(group, layer.groups, {\n                sprites: without(group.sprites, sprite)\n            });\n\n            const layers = update(layer, state.layers, { groups });\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"RotateLayer\": {\n            const { layer } = action;\n\n            const layers = update(\n                layer,\n                state.layers,\n                rotateLayer(layer, state.layers)\n            );\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"PushDownLayer\": {\n            const { layer } = action;\n\n            const [pushedLayer] = pushDownOutOfNegative([layer]);\n\n            const layers = update(layer, state.layers, pushedLayer);\n\n            return {\n                ...state,\n                layers\n            };\n        }\n\n        case \"PushAllDown\": {\n            const layers = pushDownOutOfNegative(state.layers);\n\n            return {\n                ...state,\n                layers\n            };\n        }\n    }\n}\n","import { AppState, Layer, Crop, ExtractedSpriteGroup } from \"./types\";\nimport { UndoableAction } from \"./undoableState\";\n\nexport type Action =\n    | UndoableAction\n    | { type: \"StartEmulation\" }\n    | { type: \"TogglePause\" }\n    | { type: \"SetFocusedLayer\"; layer: Layer }\n    | { type: \"SetCrop\"; crop: Crop }\n    | { type: \"ToggleGrid\" }\n    | { type: \"ClearCrop\" }\n    | { type: \"ToggleVisibilityOfGroup\"; group: ExtractedSpriteGroup }\n    | { type: \"ToggleVisibilityOfLayer\"; layer: Layer }\n    | { type: \"undo\" }\n    | { type: \"redo\" };\n\nexport type State = {\n    past: AppState[];\n    present: AppState;\n    future: AppState[];\n\n    /**\n     * indicates emulation has started, it may have since been paused\n     */\n    hasStarted: boolean;\n\n    /**\n     * true if the emulator has paused, false if is either running\n     * or has yet to start. It is only safe to access Neo Geo memory\n     * during a pause. In general the UI should largely \"shut down\" when\n     * this value is false\n     */\n    isPaused: boolean;\n\n    /**\n     * Indicates which pause session we are currently on.\n     * If this value increments, the user has unpaused then repaused\n     * the emulation. At that point, it is no longer safe to assume\n     * Neo Geo memory has not changed\n     */\n    pauseId: number;\n\n    /**\n     * A crop for the compose screen. When the gif is built, only\n     * the tiles inside the crop boundaries are considered\n     */\n    crop?: Crop;\n\n    /**\n     * Whether to show an outline around extracted tiles. Helps show\n     * the real bounds of a sprite group\n     */\n    showGrid: boolean;\n\n    hiddenLayers: Record<number, boolean>;\n    hiddenGroups: Record<number, boolean>;\n};\n\nexport type NonUndoableState = Omit<State, \"past\" | \"present\" | \"future\">;\n\nexport function getReducer(\n    initialAppState: AppState,\n    reducer: (\n        state: AppState,\n        action: UndoableAction,\n        nonUndoableState: NonUndoableState\n    ) => AppState\n) {\n    const initialState: State = {\n        past: [],\n        present: initialAppState,\n        future: [],\n        hasStarted: false,\n        isPaused: false,\n        pauseId: 0,\n        crop: undefined,\n        showGrid: false,\n        hiddenLayers: {},\n        hiddenGroups: {}\n    };\n\n    function proxyReducer(state: State, action: Action): State {\n        let newState;\n\n        switch (action.type) {\n            case \"StartEmulation\":\n                return {\n                    ...state,\n                    hasStarted: true\n                };\n\n            case \"TogglePause\":\n                const nowPaused = !state.isPaused;\n                return {\n                    ...state,\n                    isPaused: nowPaused,\n                    pauseId: nowPaused ? state.pauseId + 1 : state.pauseId\n                };\n\n            case \"ToggleGrid\": {\n                return {\n                    ...state,\n                    showGrid: !state.showGrid\n                };\n            }\n\n            case \"SetCrop\": {\n                const { crop } = action;\n\n                return {\n                    ...state,\n                    crop\n                };\n            }\n\n            case \"ClearCrop\": {\n                return {\n                    ...state,\n                    crop: undefined\n                };\n            }\n\n            case \"ToggleVisibilityOfGroup\": {\n                const { group } = action;\n\n                return {\n                    ...state,\n                    hiddenGroups: {\n                        ...state.hiddenGroups,\n                        [group.id]: !state.hiddenGroups[group.id]\n                    }\n                };\n            }\n\n            case \"ToggleVisibilityOfLayer\": {\n                const { layer } = action;\n\n                return {\n                    ...state,\n                    hiddenLayers: {\n                        ...state.hiddenLayers,\n                        [layer.id]: !state.hiddenLayers[layer.id]\n                    }\n                };\n            }\n\n            case \"undo\": {\n                const pastCopy = [...state.past];\n                const newPresent = pastCopy.pop();\n\n                if (!newPresent) {\n                    throw new Error(\"undo: nothing to undo!\");\n                }\n\n                newState = {\n                    ...state,\n                    past: pastCopy,\n                    present: newPresent,\n                    future: [...state.future, state.present]\n                };\n                break;\n            }\n            case \"redo\": {\n                const futureCopy = [...state.future];\n                const newPresent = futureCopy.pop();\n\n                if (!newPresent) {\n                    throw new Error(\"redo: nothing to redo!\");\n                }\n\n                newState = {\n                    ...state,\n                    past: [...state.past, state.present],\n                    present: newPresent,\n                    future: futureCopy\n                };\n                break;\n            }\n            default: {\n                newState = {\n                    ...state,\n                    past: [...state.past, state.present],\n                    present: reducer(\n                        state.present,\n                        action as UndoableAction,\n                        state\n                    )\n                };\n                break;\n            }\n        }\n\n        return newState;\n    }\n\n    return {\n        initialState,\n        reducer: proxyReducer\n    };\n}\n","import React, {\n    createContext,\n    Dispatch,\n    FunctionComponent,\n    useReducer\n} from \"react\";\nimport {\n    initialState as undoableInitialState,\n    reducer as undoableReducer\n} from \"./undoableState\";\nimport { getReducer, Action } from \"./state\";\n\nconst { initialState, reducer } = getReducer(\n    undoableInitialState,\n    undoableReducer\n);\n\nexport const stateContext = createContext(initialState);\nexport const dispatchContext = createContext((() => 0) as Dispatch<Action>);\n\nexport const Provider: FunctionComponent = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <dispatchContext.Provider value={dispatch}>\n            <stateContext.Provider value={state}>\n                {children}\n            </stateContext.Provider>\n        </dispatchContext.Provider>\n    );\n};\n","import { memoize } from \"lodash\";\n\n// 16 rows, each row has 2 ints (32 bits each)\nconst TILE_SIZE_INTS = 2 * 16;\nconst TILE_SIZE_BYTES = TILE_SIZE_INTS * 4;\n\nconst map: Record<string, number> = {\n    0: 3,\n    1: 2,\n    2: 1,\n    3: 0,\n    4: 7,\n    5: 6,\n    6: 5,\n    7: 4\n};\n\nexport const getTileIndexedColorData = memoize(function getTileIndexedColorData(\n    tileIndex: number\n): number[] {\n    const cromAddr = window.Module._get_rom_ctile_addr();\n    const tileOffset = TILE_SIZE_BYTES * tileIndex;\n\n    const tileData: number[] = [];\n\n    for (let i = 0; i < TILE_SIZE_BYTES; ++i) {\n        tileData[i] = window.HEAPU8[cromAddr + tileOffset + i];\n    }\n\n    const tileIndexData: number[] = [];\n\n    for (let y = 0; y < 16; ++y) {\n        for (let x = 0; x < 8; ++x) {\n            const pixelPair = tileData[y * 8 + map[x]];\n\n            const leftPixelColorIndex = (pixelPair >> 4) & 0xf;\n            const rightPixelColorIndex = pixelPair & 0xf;\n\n            tileIndexData.push(leftPixelColorIndex, rightPixelColorIndex);\n        }\n    }\n\n    return tileIndexData;\n});\n\nexport function renderTileToCanvas(\n    canvas: HTMLCanvasElement,\n    tileIndex: number,\n    rgbPalette: Array<[number, number, number, number]>\n) {\n    const indexedTileData = getTileIndexedColorData(tileIndex);\n\n    canvas.width = 16;\n    canvas.height = 16;\n\n    const context = canvas.getContext(\"2d\")!;\n    const imageData = context.getImageData(0, 0, 16, 16);\n\n    for (let y = 0; y < 16; ++y) {\n        for (let x = 0; x < 16; ++x) {\n            const pixelPaletteIndex = indexedTileData[y * 16 + x];\n            const pixel = rgbPalette[pixelPaletteIndex];\n\n            for (let i = 0; i < pixel.length; ++i) {\n                imageData.data[(y * 16 + x) * 4 + i] = pixel[i];\n            }\n        }\n    }\n\n    context.putImageData(imageData, 0, 0);\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { renderTileToCanvas } from \"../state/renderTileToCanvas\";\n\nimport styles from \"./extractedTile.module.css\";\n\ninterface ExtractedTileProps {\n    y: number;\n    tileIndex: number;\n    rgbPalette: Array<[number, number, number, number]>;\n    horizontalFlip?: boolean;\n    verticalFlip?: boolean;\n    outlined?: boolean;\n}\n\nexport const ExtractedTile: React.FunctionComponent<\n    ExtractedTileProps\n> = React.memo<ExtractedTileProps>(\n    ({\n        y: tileY,\n        tileIndex,\n        rgbPalette,\n        horizontalFlip,\n        verticalFlip,\n        outlined\n    }) => {\n        function renderCanvas(canvas: HTMLCanvasElement) {\n            renderTileToCanvas(canvas, tileIndex, rgbPalette);\n        }\n\n        const horizontalScale = horizontalFlip ? -1 : 1;\n        const verticalScale = verticalFlip ? -1 : 1;\n\n        const classes = classnames(styles.root, {\n            [styles.outlined]: outlined\n        });\n\n        const inlineStyle = {\n            transform: `scale(${horizontalScale},${verticalScale})`,\n            top: tileY\n        };\n\n        return (\n            <canvas\n                className={classes}\n                data-tileindex={tileIndex}\n                ref={r => r && renderCanvas(r)}\n                style={inlineStyle}\n            />\n        );\n    }\n);\n","import React, { useEffect } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { ExtractedSprite as ExtractedSpriteData } from \"../state/types\";\nimport { ExtractedTile } from \"./extractedTile\";\n\nimport styles from \"./extractedSprite.module.css\";\n\ninterface ExtractedSpriteProps {\n    data: ExtractedSpriteData;\n    autoAnimate?: boolean;\n    animationCounter?: number;\n    canDrag: boolean;\n    outlineTiles?: boolean;\n    setYToZero?: boolean;\n    overrideX?: number;\n}\n\nexport const ExtractedSprite: React.FunctionComponent<ExtractedSpriteProps> = ({\n    data,\n    autoAnimate,\n    animationCounter,\n    canDrag,\n    outlineTiles,\n    setYToZero,\n    overrideX\n}) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dragRef, preview] = useDrag({\n        item: {\n            spriteMemoryIndex: data.spriteMemoryIndex,\n            pauseId: data.pauseId,\n            type: \"Sprite\",\n            isAdhoc: data.isAdhoc\n        },\n        canDrag() {\n            return canDrag;\n        }\n    });\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    const tiles = data.tiles.map((tileData, i) => {\n        let tileIndex = tileData.tileIndex;\n\n        if (autoAnimate && typeof animationCounter === \"number\") {\n            if (tileData.autoAnimation === 3) {\n                // 3 bit auto animation: the 4th bit is set, indicating this tile does 3bit auto animation\n                // that means take its tileIndex, and replace its bottom three bits with those of the animation counter\n                tileIndex =\n                    (tileIndex & ~7) + ((tileIndex + animationCounter) & 7);\n            }\n            if (tileData.autoAnimation === 2) {\n                // 2 bit auto animation: like above but replace its bottom two bits\n                tileIndex =\n                    (tileIndex & ~3) + ((tileIndex + animationCounter) & 3);\n            }\n        }\n\n        return (\n            <ExtractedTile\n                key={i}\n                y={tileData.composedY - data.composedY}\n                tileIndex={tileIndex}\n                rgbPalette={tileData.rgbPalette}\n                horizontalFlip={tileData.horizontalFlip}\n                verticalFlip={tileData.verticalFlip}\n                outlined={outlineTiles}\n            />\n        );\n    });\n\n    const style = {\n        top: setYToZero ? 0 : data.composedY,\n        left: typeof overrideX === \"number\" ? overrideX : data.composedX,\n        gridTemplateRows: `repeat(${data.tiles.length}, 16px)`,\n        zIndex: data.spriteMemoryIndex\n    };\n\n    return (\n        <div ref={dragRef} className={styles.root} style={style}>\n            {tiles}\n        </div>\n    );\n};\n","import React from \"react\";\nimport {\n    extractSpriteAndStickyCompanionsToGroup,\n    extractSpritesIntoGroup\n} from \"./state/extractSpriteGroup\";\nimport { ExtractedSprite } from \"./composeScreen/extractedSprite\";\n\ninterface StickySpriteGroupDragPreviewProps {\n    seedSpriteMemoryIndex: number;\n}\n\nexport const StickySpriteGroupDragPreview: React.FunctionComponent<\n    StickySpriteGroupDragPreviewProps\n> = React.memo<StickySpriteGroupDragPreviewProps>(\n    ({ seedSpriteMemoryIndex }) => {\n        const spriteGroupData = extractSpriteAndStickyCompanionsToGroup(\n            seedSpriteMemoryIndex,\n            0,\n            0\n        );\n\n        const sprites = spriteGroupData.sprites.map((sprite, i) => (\n            <ExtractedSprite key={i} data={sprite} canDrag={false} setYToZero />\n        ));\n\n        return <div>{sprites}</div>;\n    }\n);\n\ninterface AdhocSpriteGroupDragPreviewProps {\n    spriteMemoryIndices: number[];\n}\n\nexport const AdhocSpriteGroupDragPreview: React.FunctionComponent<\n    AdhocSpriteGroupDragPreviewProps\n> = React.memo<AdhocSpriteGroupDragPreviewProps>(({ spriteMemoryIndices }) => {\n    const spriteGroupData = extractSpritesIntoGroup(spriteMemoryIndices, 0, 0);\n\n    const sprites = spriteGroupData.sprites.map((sprite, i) => (\n        <ExtractedSprite key={i} data={sprite} canDrag={false} setYToZero />\n    ));\n\n    return <div>{sprites}</div>;\n});\n","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport {\n    StickySpriteGroupDragPreview,\n    AdhocSpriteGroupDragPreview\n} from \"./SpriteGroupDragPreview\";\n\nexport const DragPreviewLayer: React.FunctionComponent = () => {\n    const { isDragging, item, currentOffset } = useDragLayer(monitor => {\n        return {\n            item: monitor.getItem(),\n            initialOffset: monitor.getInitialSourceClientOffset(),\n            currentOffset: monitor.getClientOffset(),\n            isDragging: monitor.isDragging()\n        };\n    });\n\n    if (\n        !isDragging ||\n        !currentOffset ||\n        (item.type !== \"Sprite\" && item.type !== \"Sprites\")\n    ) {\n        return null;\n    }\n\n    const style = {\n        position: \"fixed\",\n        top: currentOffset.y + 4,\n        left: currentOffset.x + 4,\n        zIndex: 1000\n    } as const;\n\n    let spritesCmp;\n\n    if (item.type === \"Sprite\" && !item.isAdhoc) {\n        spritesCmp = (\n            <StickySpriteGroupDragPreview\n                seedSpriteMemoryIndex={item.spriteMemoryIndex}\n            />\n        );\n    } else if (item.type === \"Sprite\" && item.isAdhoc) {\n        spritesCmp = (\n            <AdhocSpriteGroupDragPreview\n                spriteMemoryIndices={[item.spriteMemoryIndex]}\n            />\n        );\n    } else {\n        spritesCmp = (\n            <AdhocSpriteGroupDragPreview\n                spriteMemoryIndices={item.spriteMemoryIndices}\n            />\n        );\n    }\n\n    return <div style={style}>{spritesCmp}</div>;\n};\n","import { useContext, Dispatch } from \"react\";\nimport { AppState } from \"./types\";\nimport { Action, NonUndoableState } from \"./state\";\nimport { stateContext, dispatchContext } from \"./provider\";\n\nexport function useAppState(): {\n    state: AppState & NonUndoableState;\n    dispatch: Dispatch<Action>;\n    undo: Function;\n    redo: Function;\n    canUndo: boolean;\n    canRedo: boolean;\n} {\n    const dispatch = useContext(dispatchContext);\n    const rawState = useContext(stateContext);\n\n    const { past, present, future, ...nonUndoableState } = rawState;\n\n    const state = {\n        ...rawState.present,\n        ...nonUndoableState\n    };\n\n    return {\n        state,\n        dispatch,\n        undo() {\n            dispatch({ type: \"undo\" });\n        },\n        redo() {\n            dispatch({ type: \"redo\" });\n        },\n        canUndo: rawState.past.length > 0,\n        canRedo: rawState.future.length > 0\n    };\n}\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useAppState } from \"../state\";\n\nfunction loadFile<T>(file: File): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            if (reader.result) {\n                resolve((reader.result as unknown) as T);\n            } else {\n                reject(`Failed to load: ${file.name}`);\n            }\n        });\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n\nasync function addFileToVirtualFS(file: File) {\n    const data: ArrayBuffer = await loadFile(file);\n\n    window.Module.FS_createDataFile(\n        \"/virtualfs\",\n        file.name,\n        new Uint8Array(data),\n        true,\n        true\n    );\n}\n\nexport const ChooseGameModal: React.FunctionComponent = () => {\n    const [isOpen, setIsOpen] = useState(true);\n    const [gameName, setGameName] = useState(\"\");\n    const [biosLoaded, setBiosLoaded] = useState(\n        process.env.NODE_ENV !== \"production\"\n    );\n    const { dispatch } = useAppState();\n\n    async function loadBiosFile(e: React.ChangeEvent<HTMLInputElement>) {\n        const file = e.target && e.target.files && e.target.files[0];\n\n        if (!file) {\n            return;\n        }\n\n        await addFileToVirtualFS(file);\n        setBiosLoaded(true);\n\n        if (gameName) {\n            startGame(gameName);\n        }\n    }\n\n    async function loadROMFile(e: React.ChangeEvent<HTMLInputElement>) {\n        const file = e.target && e.target.files && e.target.files[0];\n\n        if (!file) {\n            return;\n        }\n\n        await addFileToVirtualFS(file);\n\n        const gameName = file.name.replace(\".zip\", \"\");\n\n        if (biosLoaded) {\n            startGame(gameName);\n        } else {\n            setGameName(gameName);\n        }\n    }\n\n    function startGame(overrideGameName?: string) {\n        const argv = window.stackAlloc(3 * 4);\n\n        window.HEAP32[argv >> 2] = window.allocateUTF8OnStack(\"gngeo\");\n        window.HEAP32[(argv >> 2) + 1] = window.allocateUTF8OnStack(\n            overrideGameName || gameName\n        );\n        window.HEAP32[(argv >> 2) + 2] = 0;\n\n        setIsOpen(false);\n        dispatch({ type: \"StartEmulation\" });\n\n        try {\n            window.Module._run_rom(2, argv);\n        } catch (e) {\n            console.log(\"_run_rom threw\");\n        }\n    }\n\n    let debugButton = null;\n\n    if (process.env.NODE_ENV !== \"production\") {\n        debugButton = (\n            <button onClick={() => startGame(\"samsho2\")}>samsho2</button>\n        );\n    }\n\n    return (\n        <Modal isOpen={isOpen}>\n            <div>\n                BIOS\n                <input type=\"file\" onChange={loadBiosFile} />\n            </div>\n            <div>\n                ROM\n                <input type=\"file\" onChange={loadROMFile} />\n            </div>\n            {debugButton}\n        </Modal>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Pause from \"@material-ui/icons/Pause\";\n\nimport styles from \"./pauseOverlay.module.css\";\n\ninterface PauseOverlayProps {\n    className?: string;\n    onTogglePause: () => void;\n    isPaused: boolean;\n}\n\nexport const PauseOverlay: React.FunctionComponent<PauseOverlayProps> = ({\n    className,\n    onTogglePause,\n    isPaused\n}) => {\n    const Icon = isPaused ? PlayArrow : Pause;\n\n    const classes = classnames(styles.root, className);\n\n    return (\n        <div\n            className={classes}\n            onClick={() => onTogglePause()}\n            title={`click to ${isPaused ? \"play\" : \"pause\"}`}\n        >\n            <Icon />\n        </div>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { useAppState } from \"../state\";\nimport { ChooseGameModal } from \"./chooseGameModal\";\nimport { PauseOverlay } from \"./pauseOverlay\";\n\nimport styles from \"./emulator.module.css\";\n\ninterface EmulatorProps {\n    className?: string;\n}\n\nexport const Emulator: React.FunctionComponent<EmulatorProps> = props => {\n    const { state, dispatch } = useAppState();\n\n    function togglePause() {\n        if (state.isPaused) {\n            window.Module.resumeMainLoop();\n        } else {\n            window.Module.pauseMainLoop();\n        }\n\n        dispatch({ type: \"TogglePause\" });\n    }\n\n    const classes = classnames(styles.root, props.className);\n\n    return (\n        <>\n            <ChooseGameModal />\n            <div className={classes}>\n                <canvas id=\"canvas\" />\n                <PauseOverlay\n                    className={styles.pauseOverlay}\n                    onTogglePause={() => togglePause()}\n                    isPaused={state.isPaused}\n                />\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { renderTileToCanvas } from \"../state/renderTileToCanvas\";\nimport {\n    getNeoGeoPalette,\n    convertNeoGeoPaletteToRGB\n} from \"../palette/neoGeoPalette\";\n\nimport styles from \"./tile.module.css\";\n\ninterface TileProps {\n    y: number;\n    tileIndex: number;\n    paletteIndex: number;\n    horizontalFlip?: boolean;\n    verticalFlip?: boolean;\n}\n\nexport const Tile: React.FunctionComponent<TileProps> = React.memo<TileProps>(\n    ({ y: tileY, tileIndex, paletteIndex, horizontalFlip, verticalFlip }) => {\n        function renderCanvas(canvas: HTMLCanvasElement) {\n            const rgbPalette = convertNeoGeoPaletteToRGB(\n                getNeoGeoPalette(paletteIndex)\n            );\n            renderTileToCanvas(canvas, tileIndex, rgbPalette);\n        }\n\n        const horizontalScale = horizontalFlip ? -1 : 1;\n        const verticalScale = verticalFlip ? -1 : 1;\n\n        const inlineStyle = {\n            transform: `scale(${horizontalScale},${verticalScale})`\n        };\n\n        return (\n            <canvas\n                className={styles.canvas}\n                ref={r => r && renderCanvas(r)}\n                style={inlineStyle}\n            />\n        );\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Tile } from \"./tile\";\nimport { SpriteData } from \"../state/spriteData\";\n\nimport styles from \"./sprite.module.css\";\n\ninterface SpriteProps {\n    className?: string;\n    spriteData: SpriteData;\n}\n\ninterface PreviewProps {\n    connect: any;\n}\n\nexport const Sprite: React.FunctionComponent<SpriteProps> = ({\n    className,\n    spriteData\n}) => {\n    const { spriteMemoryIndex } = spriteData;\n\n    if (spriteData.tiles.length === 0) {\n        return null;\n    }\n\n    const tiles = spriteData.tiles.map((tileData, i) => (\n        <Tile\n            key={i}\n            y={tileData.y}\n            tileIndex={tileData.tileIndex}\n            paletteIndex={tileData.paletteIndex}\n            horizontalFlip={tileData.horizontalFlip}\n            verticalFlip={tileData.verticalFlip}\n        />\n    ));\n\n    const style = {\n        gridTemplateRows: `repeat(${spriteData.tiles.length}, 8px)`,\n        zIndex: spriteMemoryIndex\n    };\n\n    const classes = classnames(styles.sprite, className);\n\n    return (\n        <div className={classes} style={style}>\n            {tiles}\n        </div>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Sprite } from \"./sprite\";\nimport { SpriteData } from \"../state/spriteData\";\n\nimport styles from \"./spriteEntry.module.css\";\n\ninterface SpriteEntryProps {\n    className?: string;\n    spriteData: SpriteData;\n    focused?: boolean;\n    onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport const SpriteEntry: React.FunctionComponent<SpriteEntryProps> = ({\n    className,\n    spriteData,\n    focused,\n    onClick\n}) => {\n    const classes = classnames(styles.root, className, {\n        [styles.focused]: focused\n    });\n\n    return (\n        <div className={classes} onClick={onClick}>\n            <div className={styles.index}>{spriteData.spriteMemoryIndex}</div>\n            <div className={styles.spriteContainer}>\n                {<Sprite className={styles.sprite} spriteData={spriteData} />}\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport classnames from \"classnames\";\nimport { useDrag } from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { SpriteEntry } from \"./spriteEntry\";\nimport { useAppState } from \"../state\";\nimport { getSpriteData } from \"../state/spriteData\";\n\nimport styles from \"./spriteTray.module.css\";\n\nconst TOTAL_SPRITE_COUNT = 381;\n\nfunction arrayFrom(minValue: number, maxValue: number) {\n    const count = maxValue - minValue + 1;\n\n    return new Array(count).fill(0, 0, count).map((_, i) => i + minValue);\n}\n\ninterface SpriteTrayProps {\n    className?: string;\n}\n\nexport const SpriteTray: React.FunctionComponent<SpriteTrayProps> = ({\n    className\n}) => {\n    const { state } = useAppState();\n    const [focusedEntryIndices, setFocusedEntryIndices] = useState<number[]>(\n        []\n    );\n    const [shiftKeyStartEntryIndex, setShiftKeyStartEntryIndex] = useState<\n        null | number\n    >(null);\n\n    const firstFillerRef = useRef<HTMLDivElement | null>(null);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dragRef, preview] = useDrag({\n        // @ts-ignore TS insists this have type, spriteMemoryIndex, etc, but it's not actually used\n        item: { type: \"Sprite\" },\n        begin(monitor: any) {\n            if (divRef && firstFillerRef && firstFillerRef.current) {\n                const x =\n                    monitor.getClientOffset().x -\n                    divRef.getBoundingClientRect().left -\n                    firstFillerRef.current.getBoundingClientRect().width;\n\n                const index = Math.floor(x / 8);\n\n                if (focusedEntryIndices.indexOf(index) > -1) {\n                    return {\n                        type: \"Sprites\",\n                        spriteMemoryIndices: focusedEntryIndices.map(\n                            fei => spriteDatas[fei].spriteMemoryIndex\n                        )\n                    };\n                } else if (index >= 0 && index < spriteDatas.length) {\n                    return {\n                        spriteMemoryIndex: spriteDatas[index].spriteMemoryIndex,\n                        type: \"Sprite\"\n                    };\n                }\n            }\n        },\n        canDrag() {\n            return state.isPaused;\n        }\n    });\n\n    const [divRef, setDivRef] = useState<null | HTMLDivElement>(null);\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    if (!state.isPaused) {\n        const classes = classnames(styles.root, styles.message, className);\n        return (\n            <div className={classes}>\n                pause the game to load the current sprites\n            </div>\n        );\n    }\n\n    const spriteDatas = new Array(TOTAL_SPRITE_COUNT)\n        .fill(1, 0, TOTAL_SPRITE_COUNT)\n        .map((_, i) => getSpriteData(i))\n        .filter(d => d.tiles.length > 0);\n\n    const sprites = spriteDatas.map((spriteData, i) => (\n        <SpriteEntry\n            key={i}\n            spriteData={spriteData}\n            onClick={e => {\n                if (e.ctrlKey) {\n                    setFocusedEntryIndices(focusedEntryIndices.concat(i));\n                    setShiftKeyStartEntryIndex(null);\n                } else if (e.shiftKey) {\n                    if (\n                        shiftKeyStartEntryIndex !== null ||\n                        focusedEntryIndices.length === 1\n                    ) {\n                        const minIndex = Math.min(\n                            shiftKeyStartEntryIndex || focusedEntryIndices[0],\n                            i\n                        );\n                        const maxIndex = Math.max(\n                            shiftKeyStartEntryIndex || focusedEntryIndices[0],\n                            i\n                        );\n                        setFocusedEntryIndices(arrayFrom(minIndex, maxIndex));\n                    } else {\n                        setFocusedEntryIndices([i]);\n                        setShiftKeyStartEntryIndex(i);\n                    }\n                } else {\n                    setFocusedEntryIndices([i]);\n                    setShiftKeyStartEntryIndex(null);\n                }\n            }}\n            focused={focusedEntryIndices.indexOf(i) > -1}\n        />\n    ));\n\n    const classes = classnames(styles.root, className, {\n        [styles.locked]: !state.isPaused\n    });\n\n    return (\n        <div\n            className={classes}\n            ref={div => {\n                setDivRef(div);\n                dragRef(div);\n            }}\n        >\n            <div\n                key={state.pauseId}\n                className={styles.spriteEntries}\n                style={{\n                    gridTemplateColumns: `1fr repeat(${spriteDatas.length}, max-content) 1fr`\n                }}\n            >\n                <div\n                    className={styles.filler}\n                    ref={firstFillerRef}\n                    style={{ gridColumn: 1 }}\n                />\n                {sprites}\n                <div\n                    className={styles.filler}\n                    style={{ gridColumn: spriteDatas.length + 2 }}\n                />\n            </div>\n        </div>\n    );\n};\n","/**\n * This class handles LZW encoding\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport const LZWEncoder = function() {\n    var exports = {};\n    var EOF = -1;\n    var imgW;\n    var imgH;\n    var pixAry;\n    var initCodeSize;\n    var remaining;\n    var curPixel;\n\n    // GIFCOMPR.C - GIF Image compression routines\n    // Lempel-Ziv compression based on 'compress'. GIF modifications by\n    // David Rowley (mgardi@watdcsu.waterloo.edu)\n    // General DEFINEs\n\n    var BITS = 12;\n    var HSIZE = 5003; // 80% occupancy\n\n    // GIF Image compression - modified 'compress'\n    // Based on: compress.c - File compression ala IEEE Computer, June 1984.\n    // By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n    // Jim McKie (decvax!mcvax!jim)\n    // Steve Davies (decvax!vax135!petsd!peora!srd)\n    // Ken Turkowski (decvax!decwrl!turtlevax!ken)\n    // James A. Woods (decvax!ihnp4!ames!jaw)\n    // Joe Orost (decvax!vax135!petsd!joe)\n\n    var n_bits; // number of bits/code\n    var maxbits = BITS; // user settable max # bits/code\n    var maxcode; // maximum code, given n_bits\n    var maxmaxcode = 1 << BITS; // should NEVER generate this code\n    var htab = [];\n    var codetab = [];\n    var hsize = HSIZE; // for dynamic table sizing\n    var free_ent = 0; // first unused entry\n\n    // block compression parameters -- after all codes are used up,\n    // and compression rate changes, start over.\n\n    var clear_flg = false;\n\n    // Algorithm: use open addressing double hashing (no chaining) on the\n    // prefix code / next character combination. We do a variant of Knuth's\n    // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n    // secondary probe. Here, the modular division first probe is gives way\n    // to a faster exclusive-or manipulation. Also do block compression with\n    // an adaptive reset, whereby the code table is cleared when the compression\n    // ratio decreases, but after the table fills. The variable-length output\n    // codes are re-sized at this point, and a special CLEAR code is generated\n    // for the decompressor. Late addition: construct the table according to\n    // file size for noticeable speed improvement on small files. Please direct\n    // questions about this implementation to ames!jaw.\n\n    var g_init_bits;\n    var ClearCode;\n    var EOFCode;\n\n    // output\n    // Output the given code.\n    // Inputs:\n    // code: A n_bits-bit integer. If == -1, then EOF. This assumes\n    // that n_bits =< wordsize - 1.\n    // Outputs:\n    // Outputs code to the file.\n    // Assumptions:\n    // Chars are 8 bits long.\n    // Algorithm:\n    // Maintain a BITS character long buffer (so that 8 codes will\n    // fit in it exactly). Use the VAX insv instruction to insert each\n    // code in turn. When the buffer fills up empty it and start over.\n\n    var cur_accum = 0;\n    var cur_bits = 0;\n    var masks = [\n        0x0000,\n        0x0001,\n        0x0003,\n        0x0007,\n        0x000f,\n        0x001f,\n        0x003f,\n        0x007f,\n        0x00ff,\n        0x01ff,\n        0x03ff,\n        0x07ff,\n        0x0fff,\n        0x1fff,\n        0x3fff,\n        0x7fff,\n        0xffff\n    ];\n\n    // Number of characters so far in this 'packet'\n    var a_count;\n\n    // Define the storage for the packet accumulator\n    var accum = [];\n\n    var LZWEncoder = (exports.LZWEncoder = function LZWEncoder(\n        width,\n        height,\n        pixels,\n        color_depth\n    ) {\n        imgW = width;\n        imgH = height;\n        pixAry = pixels;\n        initCodeSize = Math.max(2, color_depth);\n    });\n\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    var char_out = function char_out(c, outs) {\n        accum[a_count++] = c;\n        if (a_count >= 254) flush_char(outs);\n    };\n\n    // Clear out the hash table\n    // table clear for block compress\n\n    var cl_block = function cl_block(outs) {\n        cl_hash(hsize);\n        free_ent = ClearCode + 2;\n        clear_flg = true;\n        output(ClearCode, outs);\n    };\n\n    // reset code table\n    var cl_hash = function cl_hash(hsize) {\n        for (var i = 0; i < hsize; ++i) htab[i] = -1;\n    };\n\n    var compress = (exports.compress = function compress(init_bits, outs) {\n        var fcode;\n        var i; /* = 0 */\n        var c;\n        var ent;\n        var disp;\n        var hsize_reg;\n        var hshift;\n\n        // Set up the globals: g_init_bits - initial number of bits\n        g_init_bits = init_bits;\n\n        // Set up the necessary values\n        clear_flg = false;\n        n_bits = g_init_bits;\n        maxcode = MAXCODE(n_bits);\n\n        ClearCode = 1 << (init_bits - 1);\n        EOFCode = ClearCode + 1;\n        free_ent = ClearCode + 2;\n\n        a_count = 0; // clear packet\n\n        ent = nextPixel();\n\n        hshift = 0;\n        for (fcode = hsize; fcode < 65536; fcode *= 2) ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n\n        hsize_reg = hsize;\n        cl_hash(hsize_reg); // clear hash table\n\n        output(ClearCode, outs);\n\n        outer_loop: while ((c = nextPixel()) != EOF) {\n            fcode = (c << maxbits) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n\n            if (htab[i] == fcode) {\n                ent = codetab[i];\n                continue;\n            } else if (htab[i] >= 0) {\n                // non-empty slot\n\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0) disp = 1;\n\n                do {\n                    if ((i -= disp) < 0) i += hsize_reg;\n\n                    if (htab[i] == fcode) {\n                        ent = codetab[i];\n                        continue outer_loop;\n                    }\n                } while (htab[i] >= 0);\n            }\n\n            output(ent, outs);\n            ent = c;\n            if (free_ent < maxmaxcode) {\n                codetab[i] = free_ent++; // code -> hashtable\n                htab[i] = fcode;\n            } else cl_block(outs);\n        }\n\n        // Put out the final code.\n        output(ent, outs);\n        output(EOFCode, outs);\n    });\n\n    // ----------------------------------------------------------------------------\n    var encode = (exports.encode = function encode(os) {\n        os.writeByte(initCodeSize); // write \"initial code size\" byte\n        remaining = imgW * imgH; // reset navigation variables\n        curPixel = 0;\n        compress(initCodeSize + 1, os); // compress and write the pixel data\n        os.writeByte(0); // write block terminator\n    });\n\n    // Flush the packet to disk, and reset the accumulator\n    var flush_char = function flush_char(outs) {\n        if (a_count > 0) {\n            outs.writeByte(a_count);\n            outs.writeBytes(accum, 0, a_count);\n            a_count = 0;\n        }\n    };\n\n    var MAXCODE = function MAXCODE(n_bits) {\n        return (1 << n_bits) - 1;\n    };\n\n    // ----------------------------------------------------------------------------\n    // Return the next pixel from the image\n    // ----------------------------------------------------------------------------\n\n    var nextPixel = function nextPixel() {\n        if (remaining === 0) return EOF;\n        --remaining;\n        var pix = pixAry[curPixel++];\n        return pix & 0xff;\n    };\n\n    var output = function output(code, outs) {\n        cur_accum &= masks[cur_bits];\n\n        if (cur_bits > 0) cur_accum |= code << cur_bits;\n        else cur_accum = code;\n\n        cur_bits += n_bits;\n\n        while (cur_bits >= 8) {\n            char_out(cur_accum & 0xff, outs);\n            cur_accum >>= 8;\n            cur_bits -= 8;\n        }\n\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n\n        if (free_ent > maxcode || clear_flg) {\n            if (clear_flg) {\n                maxcode = MAXCODE((n_bits = g_init_bits));\n                clear_flg = false;\n            } else {\n                ++n_bits;\n                if (n_bits == maxbits) maxcode = maxmaxcode;\n                else maxcode = MAXCODE(n_bits);\n            }\n        }\n\n        if (code == EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (cur_bits > 0) {\n                char_out(cur_accum & 0xff, outs);\n                cur_accum >>= 8;\n                cur_bits -= 8;\n            }\n\n            flush_char(outs);\n        }\n    };\n\n    LZWEncoder.apply(this, arguments);\n    return exports;\n};\n","/*\n * NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n\n/*\n * This class handles Neural-Net quantization algorithm\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport const NeuQuant = function() {\n    var exports = {};\n    var netsize = 256; /* number of colours used */\n\n    /* four primes near 500 - assume no image has a length so large */\n    /* that it is divisible by all four primes */\n\n    var prime1 = 499;\n    var prime2 = 491;\n    var prime3 = 487;\n    var prime4 = 503;\n    var minpicturebytes = 3 * prime4; /* minimum size for input image */\n\n    /*\n     * Program Skeleton ---------------- [select samplefac in range 1..30] [read\n     * image from input file] pic = (unsigned char*) malloc(3*width*height);\n     * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\n     * image header, using writecolourmap(f)] inxbuild(); write output image using\n     * inxsearch(b,g,r)\n     */\n\n    /*\n     * Network Definitions -------------------\n     */\n\n    var maxnetpos = netsize - 1;\n    var netbiasshift = 4; /* bias for colour values */\n    var ncycles = 100; /* no. of learning cycles */\n\n    /* defs for freq and bias */\n    var intbiasshift = 16; /* bias for fractions */\n    var intbias = 1 << intbiasshift;\n    var gammashift = 10; /* gamma = 1024 */\n    var gamma = 1 << gammashift;\n    var betashift = 10;\n    var beta = intbias >> betashift; /* beta = 1/1024 */\n    var betagamma = intbias << (gammashift - betashift);\n\n    /* defs for decreasing radius factor */\n    var initrad = netsize >> 3; /* for 256 cols, radius starts */\n    var radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\n    var radiusbias = 1 << radiusbiasshift;\n    var initradius = initrad * radiusbias; /* and decreases by a */\n    var radiusdec = 30; /* factor of 1/30 each cycle */\n\n    /* defs for decreasing alpha factor */\n    var alphabiasshift = 10; /* alpha starts at 1.0 */\n    var initalpha = 1 << alphabiasshift;\n    var alphadec; /* biased by 10 bits */\n\n    /* radbias and alpharadbias used for radpower calculation */\n    var radbiasshift = 8;\n    var radbias = 1 << radbiasshift;\n    var alpharadbshift = alphabiasshift + radbiasshift;\n    var alpharadbias = 1 << alpharadbshift;\n\n    /*\n     * Types and Global Variables --------------------------\n     */\n\n    var thepicture; /* the input image itself */\n    var lengthcount; /* lengthcount = H*W*3 */\n    var samplefac; /* sampling factor 1..30 */\n\n    // typedef int pixel[4]; /* BGRc */\n    var network; /* the network itself - [netsize][4] */\n    var netindex = [];\n\n    /* for network lookup - really 256 */\n    var bias = [];\n\n    /* bias and freq arrays for learning */\n    var freq = [];\n    var radpower = [];\n\n    var NeuQuant = (exports.NeuQuant = function NeuQuant(thepic, len, sample) {\n        var i;\n        var p;\n\n        thepicture = thepic;\n        lengthcount = len;\n        samplefac = sample;\n\n        network = new Array(netsize);\n\n        for (i = 0; i < netsize; i++) {\n            network[i] = new Array(4);\n            p = network[i];\n            p[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\n            freq[i] = intbias / netsize; /* 1/netsize */\n            bias[i] = 0;\n        }\n    });\n\n    var colorMap = function colorMap() {\n        var map = [];\n        var index = new Array(netsize);\n\n        for (var i = 0; i < netsize; i++) index[network[i][3]] = i;\n\n        var k = 0;\n        for (var l = 0; l < netsize; l++) {\n            var j = index[l];\n            map[k++] = network[j][0];\n            map[k++] = network[j][1];\n            map[k++] = network[j][2];\n        }\n\n        return map;\n    };\n\n    /*\n     * Insertion sort of network and building of netindex[0..255] (to do after\n     * unbias)\n     * -------------------------------------------------------------------------------\n     */\n\n    var inxbuild = function inxbuild() {\n        var i;\n        var j;\n        var smallpos;\n        var smallval;\n        var p;\n        var q;\n        var previouscol;\n        var startpos;\n\n        previouscol = 0;\n        startpos = 0;\n        for (i = 0; i < netsize; i++) {\n            p = network[i];\n            smallpos = i;\n            smallval = p[1]; /* index on g */\n\n            /* find smallest in i..netsize-1 */\n            for (j = i + 1; j < netsize; j++) {\n                q = network[j];\n                if (q[1] < smallval) {\n                    /* index on g */\n                    smallpos = j;\n                    smallval = q[1]; /* index on g */\n                }\n            }\n            q = network[smallpos];\n\n            /* swap p (i) and q (smallpos) entries */\n            if (i != smallpos) {\n                j = q[0];\n                q[0] = p[0];\n                p[0] = j;\n                j = q[1];\n                q[1] = p[1];\n                p[1] = j;\n                j = q[2];\n                q[2] = p[2];\n                p[2] = j;\n                j = q[3];\n                q[3] = p[3];\n                p[3] = j;\n            }\n\n            /* smallval entry is now in position i */\n\n            if (smallval != previouscol) {\n                netindex[previouscol] = (startpos + i) >> 1;\n\n                for (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\n\n                previouscol = smallval;\n                startpos = i;\n            }\n        }\n\n        netindex[previouscol] = (startpos + maxnetpos) >> 1;\n        for (j = previouscol + 1; j < 256; j++)\n            netindex[j] = maxnetpos; /* really 256 */\n    };\n\n    /*\n     * Main Learning Loop ------------------\n     */\n\n    var learn = function learn() {\n        var i;\n        var j;\n        var b;\n        var g;\n        var r;\n        var radius;\n        var rad;\n        var alpha;\n        var step;\n        var delta;\n        var samplepixels;\n        var p;\n        var pix;\n        var lim;\n\n        if (lengthcount < minpicturebytes) samplefac = 1;\n\n        alphadec = 30 + (samplefac - 1) / 3;\n        p = thepicture;\n        pix = 0;\n        lim = lengthcount;\n        samplepixels = lengthcount / (3 * samplefac);\n        delta = (samplepixels / ncycles) | 0;\n        alpha = initalpha;\n        radius = initradius;\n\n        rad = radius >> radiusbiasshift;\n        if (rad <= 1) rad = 0;\n\n        for (i = 0; i < rad; i++)\n            radpower[i] =\n                alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\n\n        if (lengthcount < minpicturebytes) step = 3;\n        else if (lengthcount % prime1 !== 0) step = 3 * prime1;\n        else {\n            if (lengthcount % prime2 !== 0) step = 3 * prime2;\n            else {\n                if (lengthcount % prime3 !== 0) step = 3 * prime3;\n                else step = 3 * prime4;\n            }\n        }\n\n        i = 0;\n        while (i < samplepixels) {\n            b = (p[pix + 0] & 0xff) << netbiasshift;\n            g = (p[pix + 1] & 0xff) << netbiasshift;\n            r = (p[pix + 2] & 0xff) << netbiasshift;\n            j = contest(b, g, r);\n\n            altersingle(alpha, j, b, g, r);\n            if (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\n\n            pix += step;\n            if (pix >= lim) pix -= lengthcount;\n\n            i++;\n\n            if (delta === 0) delta = 1;\n\n            if (i % delta === 0) {\n                alpha -= alpha / alphadec;\n                radius -= radius / radiusdec;\n                rad = radius >> radiusbiasshift;\n\n                if (rad <= 1) rad = 0;\n\n                for (j = 0; j < rad; j++)\n                    radpower[j] =\n                        alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\n            }\n        }\n    };\n\n    /*\n     ** Search for BGR values 0..255 (after net is unbiased) and return colour\n     * index\n     * ----------------------------------------------------------------------------\n     */\n\n    var map = (exports.map = function map(b, g, r) {\n        var i;\n        var j;\n        var dist;\n        var a;\n        var bestd;\n        var p;\n        var best;\n\n        bestd = 1000; /* biggest possible dist is 256*3 */\n        best = -1;\n        i = netindex[g]; /* index on g */\n        j = i - 1; /* start at netindex[g] and work outwards */\n\n        while (i < netsize || j >= 0) {\n            if (i < netsize) {\n                p = network[i];\n                dist = p[1] - g; /* inx key */\n\n                if (dist >= bestd) i = netsize;\n                /* stop iter */ else {\n                    i++;\n                    if (dist < 0) dist = -dist;\n                    a = p[0] - b;\n                    if (a < 0) a = -a;\n                    dist += a;\n\n                    if (dist < bestd) {\n                        a = p[2] - r;\n                        if (a < 0) a = -a;\n                        dist += a;\n\n                        if (dist < bestd) {\n                            bestd = dist;\n                            best = p[3];\n                        }\n                    }\n                }\n            }\n\n            if (j >= 0) {\n                p = network[j];\n                dist = g - p[1]; /* inx key - reverse dif */\n\n                if (dist >= bestd) j = -1;\n                /* stop iter */ else {\n                    j--;\n                    if (dist < 0) dist = -dist;\n                    a = p[0] - b;\n                    if (a < 0) a = -a;\n                    dist += a;\n\n                    if (dist < bestd) {\n                        a = p[2] - r;\n                        if (a < 0) a = -a;\n                        dist += a;\n                        if (dist < bestd) {\n                            bestd = dist;\n                            best = p[3];\n                        }\n                    }\n                }\n            }\n        }\n\n        return best;\n    });\n\n    var process = (exports.process = function process() {\n        learn();\n        unbiasnet();\n        inxbuild();\n        return colorMap();\n    });\n\n    /*\n     * Unbias network to give byte values 0..255 and record position i to prepare\n     * for sort\n     * -----------------------------------------------------------------------------------\n     */\n\n    var unbiasnet = function unbiasnet() {\n        var i;\n        var j;\n\n        for (i = 0; i < netsize; i++) {\n            network[i][0] >>= netbiasshift;\n            network[i][1] >>= netbiasshift;\n            network[i][2] >>= netbiasshift;\n            network[i][3] = i; /* record colour no */\n        }\n    };\n\n    /*\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\n     * radpower[|i-j|]\n     * ---------------------------------------------------------------------------------\n     */\n\n    var alterneigh = function alterneigh(rad, i, b, g, r) {\n        var j;\n        var k;\n        var lo;\n        var hi;\n        var a;\n        var m;\n        var p;\n\n        lo = i - rad;\n        if (lo < -1) lo = -1;\n\n        hi = i + rad;\n        if (hi > netsize) hi = netsize;\n\n        j = i + 1;\n        k = i - 1;\n        m = 1;\n\n        while (j < hi || k > lo) {\n            a = radpower[m++];\n\n            if (j < hi) {\n                p = network[j++];\n\n                try {\n                    p[0] -= (a * (p[0] - b)) / alpharadbias;\n                    p[1] -= (a * (p[1] - g)) / alpharadbias;\n                    p[2] -= (a * (p[2] - r)) / alpharadbias;\n                } catch (e) {} // prevents 1.3 miscompilation\n            }\n\n            if (k > lo) {\n                p = network[k--];\n\n                try {\n                    p[0] -= (a * (p[0] - b)) / alpharadbias;\n                    p[1] -= (a * (p[1] - g)) / alpharadbias;\n                    p[2] -= (a * (p[2] - r)) / alpharadbias;\n                } catch (e) {}\n            }\n        }\n    };\n\n    /*\n     * Move neuron i towards biased (b,g,r) by factor alpha\n     * ----------------------------------------------------\n     */\n\n    var altersingle = function altersingle(alpha, i, b, g, r) {\n        /* alter hit neuron */\n        var n = network[i];\n        n[0] -= (alpha * (n[0] - b)) / initalpha;\n        n[1] -= (alpha * (n[1] - g)) / initalpha;\n        n[2] -= (alpha * (n[2] - r)) / initalpha;\n    };\n\n    /*\n     * Search for biased BGR values ----------------------------\n     */\n\n    var contest = function contest(b, g, r) {\n        /* finds closest neuron (min dist) and updates freq */\n        /* finds best neuron (min dist-bias) and returns position */\n        /* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\n        /* bias[i] = gamma*((1/netsize)-freq[i]) */\n\n        var i;\n        var dist;\n        var a;\n        var biasdist;\n        var betafreq;\n        var bestpos;\n        var bestbiaspos;\n        var bestd;\n        var bestbiasd;\n        var n;\n\n        bestd = ~(1 << 31);\n        bestbiasd = bestd;\n        bestpos = -1;\n        bestbiaspos = bestpos;\n\n        for (i = 0; i < netsize; i++) {\n            n = network[i];\n            dist = n[0] - b;\n            if (dist < 0) dist = -dist;\n            a = n[1] - g;\n            if (a < 0) a = -a;\n            dist += a;\n            a = n[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n\n            if (dist < bestd) {\n                bestd = dist;\n                bestpos = i;\n            }\n\n            biasdist = dist - (bias[i] >> (intbiasshift - netbiasshift));\n\n            if (biasdist < bestbiasd) {\n                bestbiasd = biasdist;\n                bestbiaspos = i;\n            }\n\n            betafreq = freq[i] >> betashift;\n            freq[i] -= betafreq;\n            bias[i] += betafreq << gammashift;\n        }\n\n        freq[bestpos] += beta;\n        bias[bestpos] -= betagamma;\n        return bestbiaspos;\n    };\n\n    NeuQuant.apply(this, arguments);\n    return exports;\n};\n","/**\n * This class lets you encode animated GIF files\n * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nimport { LZWEncoder } from \"./LZWEncoder\";\nimport { NeuQuant } from \"./NeuQuant\";\n\nexport const GIFEncoder = function() {\n    for (var i = 0, chr = {}; i < 256; i++) chr[i] = String.fromCharCode(i);\n\n    function ByteArray() {\n        this.bin = [];\n    }\n\n    ByteArray.prototype.getData = function() {\n        for (var v = \"\", l = this.bin.length, i = 0; i < l; i++)\n            v += chr[this.bin[i]];\n        return v;\n    };\n\n    ByteArray.prototype.writeByte = function(val) {\n        this.bin.push(val);\n    };\n\n    ByteArray.prototype.writeUTFBytes = function(string) {\n        for (var l = string.length, i = 0; i < l; i++)\n            this.writeByte(string.charCodeAt(i));\n    };\n\n    ByteArray.prototype.writeBytes = function(array, offset, length) {\n        for (var l = length || array.length, i = offset || 0; i < l; i++)\n            this.writeByte(array[i]);\n    };\n\n    var exports = {};\n    var width; // image size\n    var height;\n    var transparent = null; // transparent color if given\n    var transIndex; // transparent index in color table\n    var repeat = -1; // no repeat\n    var delay = 0; // frame delay (hundredths)\n    var started = false; // ready to output frames\n    var out;\n    var image; // current frame\n    var pixels; // BGR byte array from frame\n    var indexedPixels; // converted frame indexed to palette\n    var colorDepth; // number of bit planes\n    var colorTab; // RGB palette\n    var usedEntry = []; // active palette entries\n    var palSize = 7; // color table size (bits-1)\n    var dispose = -1; // disposal code (-1 = use default)\n    var closeStream = false; // close stream when finished\n    var firstFrame = true;\n    var sizeSet = false; // if false, get size from first frame\n    var sample = 10; // default sample interval for quantizer\n    var comment = \"Generated by jsgif (https://github.com/antimatter15/jsgif/)\"; // default comment for generated gif\n\n    /**\n     * Sets the delay time between each frame, or changes it for subsequent frames\n     * (applies to last frame added)\n     * int delay time in milliseconds\n     * @param ms\n     */\n\n    var setDelay = (exports.setDelay = function setDelay(ms) {\n        delay = Math.round(ms / 10);\n    });\n\n    /**\n     * Sets the GIF frame disposal code for the last added frame and any\n     *\n     * subsequent frames. Default is 0 if no transparent color has been set,\n     * otherwise 2.\n     * @param code\n     * int disposal code.\n     */\n\n    var setDispose = (exports.setDispose = function setDispose(code) {\n        if (code >= 0) dispose = code;\n    });\n\n    /**\n     * Sets the number of times the set of GIF frames should be played. Default is\n     * 1; 0 means play indefinitely. Must be invoked before the first image is\n     * added.\n     *\n     * @param iter\n     * int number of iterations.\n     * @return\n     */\n\n    var setRepeat = (exports.setRepeat = function setRepeat(iter) {\n        if (iter >= 0) repeat = iter;\n    });\n\n    /**\n     * Sets the transparent color for the last added frame and any subsequent\n     * frames. Since all colors are subject to modification in the quantization\n     * process, the color in the final palette for each frame closest to the given\n     * color becomes the transparent color for that frame. May be set to null to\n     * indicate no transparent color.\n     * @param\n     * Color to be treated as transparent on display.\n     */\n\n    var setTransparent = (exports.setTransparent = function setTransparent(c) {\n        transparent = c;\n    });\n\n    /**\n     * Sets the comment for the block comment\n     * @param\n     * string to be insterted as comment\n     */\n\n    var setComment = (exports.setComment = function setComment(c) {\n        comment = c;\n    });\n\n    /**\n     * The addFrame method takes an incoming BitmapData object to create each frames\n     * @param\n     * BitmapData object to be treated as a GIF's frame\n     */\n\n    var addFrame = (exports.addFrame = function addFrame(im, is_imageData) {\n        if (im === null || !started || out === null) {\n            throw new Error(\"Please call start method before calling addFrame\");\n        }\n\n        var ok = true;\n\n        try {\n            if (!is_imageData) {\n                image = im.getImageData(0, 0, im.canvas.width, im.canvas.height)\n                    .data;\n                if (!sizeSet) setSize(im.canvas.width, im.canvas.height);\n            } else {\n                if (im instanceof ImageData) {\n                    image = im.data;\n                    if (!sizeSet || width != im.width || height != im.height) {\n                        setSize(im.width, im.height);\n                    } else {\n                    }\n                } else if (im instanceof Uint8ClampedArray) {\n                    if (im.length == width * height * 4) {\n                        image = im;\n                    } else {\n                        console.log(\n                            \"Please set the correct size: ImageData length mismatch\"\n                        );\n                        ok = false;\n                    }\n                } else {\n                    console.log(\"Please provide correct input\");\n                    ok = false;\n                }\n            }\n            getImagePixels(); // convert to correct format if necessary\n            analyzePixels(); // build color table & map pixels\n\n            if (firstFrame) {\n                writeLSD(); // logical screen descriptior\n                writePalette(); // global color table\n                if (repeat >= 0) {\n                    // use NS app extension to indicate reps\n                    writeNetscapeExt();\n                }\n            }\n\n            writeGraphicCtrlExt(); // write graphic control extension\n            if (comment !== \"\") {\n                writeCommentExt(); // write comment extension\n            }\n            writeImageDesc(); // image descriptor\n            if (!firstFrame) writePalette(); // local color table\n            writePixels(); // encode and write pixel data\n            firstFrame = false;\n        } catch (e) {\n            ok = false;\n        }\n\n        return ok;\n    });\n\n    /**\n     * @description: Downloads the encoded gif with the given name\n     * No need of any conversion from the stream data (out) to base64\n     * Solves the issue of large file sizes when there are more frames\n     * and does not involve in creation of any temporary data in the process\n     * so no wastage of memory, and speeds up the process of downloading\n     * to just calling this function.\n     * @parameter {String} filename filename used for downloading the gif\n     */\n\n    var download = (exports.download = function download(filename) {\n        if (out === null || closeStream == false) {\n            console.log(\n                \"Please call start method and add frames and call finish method before calling download\"\n            );\n        } else {\n            filename =\n                filename !== undefined\n                    ? filename.endsWith(\".gif\")\n                        ? filename\n                        : filename + \".gif\"\n                    : \"download.gif\";\n            var templink = document.createElement(\"a\");\n            templink.download = filename;\n            templink.href = URL.createObjectURL(\n                new Blob([new Uint8Array(out.bin)], { type: \"image/gif\" })\n            );\n            templink.click();\n        }\n    });\n\n    /**\n     * Adds final trailer to the GIF stream, if you don't call the finish method\n     * the GIF stream will not be valid.\n     */\n\n    var finish = (exports.finish = function finish() {\n        if (!started) return false;\n\n        var ok = true;\n        started = false;\n\n        try {\n            out.writeByte(0x3b); // gif trailer\n            closeStream = true;\n        } catch (e) {\n            ok = false;\n        }\n\n        return ok;\n    });\n\n    /**\n     * Resets some members so that a new stream can be started.\n     * This method is actually called by the start method\n     */\n\n    var reset = function reset() {\n        // reset for subsequent use\n        transIndex = 0;\n        image = null;\n        pixels = null;\n        indexedPixels = null;\n        colorTab = null;\n        closeStream = false;\n        firstFrame = true;\n    };\n\n    /**\n     * * Sets frame rate in frames per second. Equivalent to\n     * <code>setDelay(1000/fps)</code>.\n     * @param fps\n     * float frame rate (frames per second)\n     */\n\n    var setFrameRate = (exports.setFrameRate = function setFrameRate(fps) {\n        if (fps != 0xf) delay = Math.round(100 / fps);\n    });\n\n    /**\n     * Sets quality of color quantization (conversion of images to the maximum 256\n     * colors allowed by the GIF specification). Lower values (minimum = 1)\n     * produce better colors, but slow processing significantly. 10 is the\n     * default, and produces good color mapping at reasonable speeds. Values\n     * greater than 20 do not yield significant improvements in speed.\n     * @param quality\n     * int greater than 0.\n     * @return\n     */\n\n    var setQuality = (exports.setQuality = function setQuality(quality) {\n        if (quality < 1) quality = 1;\n        sample = quality;\n    });\n\n    /**\n     * Sets the GIF frame size. The default size is the size of the first frame\n     * added if this method is not invoked.\n     * @param w\n     * int frame width.\n     * @param h\n     * int frame width.\n     */\n\n    var setSize = (exports.setSize = function setSize(w, h) {\n        if (started && !firstFrame) return;\n        width = w;\n        height = h;\n        if (width < 1) width = 320;\n        if (height < 1) height = 240;\n        sizeSet = true;\n    });\n\n    /**\n     * Initiates GIF file creation on the given stream.\n     * @param os\n     * OutputStream on which GIF images are written.\n     * @return false if initial write failed.\n     */\n\n    var start = (exports.start = function start() {\n        reset();\n        var ok = true;\n        closeStream = false;\n        out = new ByteArray();\n        try {\n            out.writeUTFBytes(\"GIF89a\"); // header\n        } catch (e) {\n            ok = false;\n        }\n\n        return (started = ok);\n    });\n\n    var cont = (exports.cont = function cont() {\n        reset();\n        var ok = true;\n        closeStream = false;\n        out = new ByteArray();\n\n        return (started = ok);\n    });\n\n    /**\n     * Analyzes image colors and creates color map.\n     */\n\n    var analyzePixels = function analyzePixels() {\n        var len = pixels.length;\n        var nPix = len / 3;\n        indexedPixels = [];\n        var nq = new NeuQuant(pixels, len, sample);\n\n        // initialize quantizer\n        colorTab = nq.process(); // create reduced palette\n\n        // map image pixels to new palette\n        var k = 0;\n        for (var j = 0; j < nPix; j++) {\n            var index = nq.map(\n                pixels[k++] & 0xff,\n                pixels[k++] & 0xff,\n                pixels[k++] & 0xff\n            );\n            usedEntry[index] = true;\n            indexedPixels[j] = index;\n        }\n\n        pixels = null;\n        colorDepth = 8;\n        palSize = 7;\n\n        // get closest match to transparent color if specified\n        if (transparent !== null) {\n            transIndex = findClosest(transparent);\n        }\n    };\n\n    /**\n     * Returns index of palette color closest to c\n     */\n\n    var findClosest = function findClosest(c) {\n        if (colorTab === null) return -1;\n        var r = (c & 0xff0000) >> 16;\n        var g = (c & 0x00ff00) >> 8;\n        var b = c & 0x0000ff;\n        var minpos = 0;\n        var dmin = 256 * 256 * 256;\n        var len = colorTab.length;\n\n        for (var i = 0; i < len; ) {\n            var dr = r - (colorTab[i++] & 0xff);\n            var dg = g - (colorTab[i++] & 0xff);\n            var db = b - (colorTab[i] & 0xff);\n            var d = dr * dr + dg * dg + db * db;\n            var index = i / 3;\n            if (usedEntry[index] && d < dmin) {\n                dmin = d;\n                minpos = index;\n            }\n            i++;\n        }\n        return minpos;\n    };\n\n    /**\n     * Extracts image pixels into byte array \"pixels\n     */\n\n    var getImagePixels = function getImagePixels() {\n        var w = width;\n        var h = height;\n        pixels = [];\n        var data = image;\n        var count = 0;\n\n        for (var i = 0; i < h; i++) {\n            for (var j = 0; j < w; j++) {\n                var b = i * w * 4 + j * 4;\n                pixels[count++] = data[b];\n                pixels[count++] = data[b + 1];\n                pixels[count++] = data[b + 2];\n            }\n        }\n    };\n\n    /**\n     * Writes Graphic Control Extension\n     */\n\n    var writeGraphicCtrlExt = function writeGraphicCtrlExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xf9); // GCE label\n        out.writeByte(4); // data block size\n        var transp;\n        var disp;\n        if (transparent === null) {\n            transp = 0;\n            disp = 0; // dispose = no action\n        } else {\n            transp = 1;\n            disp = 2; // force clear if using transparent color\n        }\n        if (dispose >= 0) {\n            disp = dispose & 7; // user override\n        }\n        disp <<= 2;\n        // packed fields\n        out.writeByte(\n            0 | // 1:3 reserved\n            disp | // 4:6 disposal\n            0 | // 7 user input - 0 = none\n                transp\n        ); // 8 transparency flag\n\n        WriteShort(delay); // delay x 1/100 sec\n        out.writeByte(transIndex); // transparent color index\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes Comment Extention\n     */\n\n    var writeCommentExt = function writeCommentExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xfe); // comment label\n        out.writeByte(comment.length); // Block Size (s)\n        out.writeUTFBytes(comment);\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes Image Descriptor\n     */\n\n    var writeImageDesc = function writeImageDesc() {\n        out.writeByte(0x2c); // image separator\n        WriteShort(0); // image position x,y = 0,0\n        WriteShort(0);\n        WriteShort(width); // image size\n        WriteShort(height);\n\n        // packed fields\n        if (firstFrame) {\n            // no LCT - GCT is used for first (or only) frame\n            out.writeByte(0);\n        } else {\n            // specify normal LCT\n            out.writeByte(\n                0x80 | // 1 local color table 1=yes\n                0 | // 2 interlace - 0=no\n                0 | // 3 sorted - 0=no\n                0 | // 4-5 reserved\n                    palSize\n            ); // 6-8 size of color table\n        }\n    };\n\n    /**\n     * Writes Logical Screen Descriptor\n     */\n\n    var writeLSD = function writeLSD() {\n        // logical screen size\n        WriteShort(width);\n        WriteShort(height);\n        // packed fields\n        out.writeByte(\n            0x80 | // 1 : global color table flag = 1 (gct used)\n            0x70 | // 2-4 : color resolution = 7\n            0x00 | // 5 : gct sort flag = 0\n                palSize\n        ); // 6-8 : gct size\n\n        out.writeByte(0); // background color index\n        out.writeByte(0); // pixel aspect ratio - assume 1:1\n    };\n\n    /**\n     * Writes Netscape application extension to define repeat count.\n     */\n\n    var writeNetscapeExt = function writeNetscapeExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xff); // app extension label\n        out.writeByte(11); // block size\n        out.writeUTFBytes(\"NETSCAPE\" + \"2.0\"); // app id + auth code\n        out.writeByte(3); // sub-block size\n        out.writeByte(1); // loop sub-block id\n        WriteShort(repeat); // loop count (extra iterations, 0=repeat forever)\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes color table\n     */\n\n    var writePalette = function writePalette() {\n        out.writeBytes(colorTab);\n        var n = 3 * 256 - colorTab.length;\n        for (var i = 0; i < n; i++) out.writeByte(0);\n    };\n\n    var WriteShort = function WriteShort(pValue) {\n        out.writeByte(pValue & 0xff);\n        out.writeByte((pValue >> 8) & 0xff);\n    };\n\n    /**\n     * Encodes and writes pixel data\n     */\n\n    var writePixels = function writePixels() {\n        var myencoder = new LZWEncoder(\n            width,\n            height,\n            indexedPixels,\n            colorDepth\n        );\n        myencoder.encode(out);\n    };\n\n    /**\n     * Retrieves the GIF stream\n     */\n\n    var stream = (exports.stream = function stream() {\n        return out;\n    });\n\n    var setProperties = (exports.setProperties = function setProperties(\n        has_start,\n        is_first\n    ) {\n        started = has_start;\n        firstFrame = is_first;\n    });\n\n    return exports;\n};\n","import { Crop, Layer, ExtractedSprite, ExtractedTile } from \"./types\";\nimport { renderTileToCanvas } from \"./renderTileToCanvas\";\nimport { getMaxX, getMaxY, getAllSpritesFromLayers } from \"./spriteUtil\";\n\nfunction getDimensions(\n    sprites: ExtractedSprite[]\n): { width: number; height: number } {\n    const maxX = getMaxX(sprites) + 16;\n    const maxY = getMaxY(sprites) + 16;\n\n    return {\n        width: maxX,\n        height: maxY\n    };\n}\n\nfunction flip(\n    canvas: HTMLCanvasElement,\n    tile: ExtractedTile\n): HTMLCanvasElement {\n    const xScale = tile.horizontalFlip ? -1 : 1;\n    const yScale = tile.verticalFlip ? -1 : 1;\n    const translateX = tile.horizontalFlip ? canvas.width : 0;\n    const translateY = tile.verticalFlip ? canvas.height : 0;\n\n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.width = canvas.width;\n    newCanvas.height = canvas.height;\n\n    const context = newCanvas.getContext(\"2d\");\n\n    if (context) {\n        context.save();\n        context.translate(translateX, translateY);\n        context.scale(xScale, yScale);\n\n        context.drawImage(canvas, 0, 0);\n        context.restore();\n    }\n\n    return newCanvas;\n}\n\nfunction cropCanvas(\n    fullCanvas: HTMLCanvasElement,\n    crop: Crop\n): HTMLCanvasElement {\n    const cropWidth = crop[1].x - crop[0].x;\n    const cropHeight = crop[1].y - crop[0].y;\n\n    const croppedCanvas = document.createElement(\"canvas\");\n    croppedCanvas.width = cropWidth;\n    croppedCanvas.height = cropHeight;\n\n    const croppedCanvasContext = croppedCanvas.getContext(\"2d\")!;\n\n    croppedCanvasContext.drawImage(\n        fullCanvas,\n        crop[0].x,\n        crop[0].y,\n        cropWidth,\n        cropHeight,\n        0,\n        0,\n        cropWidth,\n        cropHeight\n    );\n\n    return croppedCanvas;\n}\n\n// TODO: account for when sprites didn't compose right up to (0,0)\nexport function layersToCanvas(\n    layers: Layer[],\n    animationCounter = 0,\n    crop?: Crop\n): HTMLCanvasElement {\n    const sprites = getAllSpritesFromLayers(layers);\n    const dimensions = getDimensions(sprites);\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    const context = canvas.getContext(\"2d\");\n\n    layers.forEach(layer => {\n        const layerSprites = getAllSpritesFromLayers([layer]);\n        const sortedSprites = [...layerSprites].sort(\n            (a, b) => a.spriteMemoryIndex - b.spriteMemoryIndex\n        );\n\n        sortedSprites.forEach(sprite => {\n            sprite.tiles.forEach(tile => {\n                let tileCanvas = document.createElement(\"canvas\");\n\n                let tileIndex = tile.tileIndex;\n\n                if (tile.autoAnimation === 3) {\n                    // 3 bit auto animation: the 4th bit is set, indicating this tile does 3bit auto animation\n                    // that means take its tileIndex, and replace its bottom three bits with those of the animation counter\n                    tileIndex =\n                        (tileIndex & ~7) + ((tileIndex + animationCounter) & 7);\n                }\n                if (tile.autoAnimation === 2) {\n                    // 2 bit auto animation: like above but replace its bottom two bits\n                    tileIndex =\n                        (tileIndex & ~3) + ((tileIndex + animationCounter) & 3);\n                }\n\n                renderTileToCanvas(tileCanvas, tileIndex, tile.rgbPalette);\n\n                if (tile.horizontalFlip || tile.verticalFlip) {\n                    tileCanvas = flip(tileCanvas, tile);\n                }\n\n                context!.drawImage(\n                    tileCanvas,\n                    sprite.composedX,\n                    tile.composedY\n                );\n            });\n        });\n    });\n\n    if (crop) {\n        return cropCanvas(canvas, crop);\n    } else {\n        return canvas;\n    }\n}\n","import { Crop, Layer, ExtractedTile } from \"./types\";\n// @ts-ignore\nimport { GIFEncoder } from \"./jsgif/GIFEncoder\";\nimport { layersToCanvas } from \"./layersToCanvas\";\nimport { getAllTilesFromLayers } from \"./spriteUtil\";\n\n// loop set to zero means forever\nconst FOREVER = 0;\n\nfunction determineNumberOfFramesToRender(\n    layers: Layer[],\n    crop: Crop | undefined\n): number {\n    // const tiles = getAllTilesFromLayers(layers);\n\n    let validTiles;\n\n    if (!crop) {\n        validTiles = getAllTilesFromLayers(layers);\n    } else {\n        validTiles = layers.reduce<ExtractedTile[]>((ts, layer) => {\n            const validLayerTiles = layer.groups.reduce<ExtractedTile[]>(\n                (lts, group) => {\n                    const validSpriteTiles = group.sprites.reduce<\n                        ExtractedTile[]\n                    >((sts, sprite) => {\n                        if (\n                            sprite.composedX < crop[0].x ||\n                            sprite.composedX > crop[1].x\n                        ) {\n                            return sts;\n                        }\n\n                        const validTilesForSprite = sprite.tiles.filter(\n                            tile => {\n                                return (\n                                    tile.composedY >= crop[0].y &&\n                                    tile.composedY < crop[1].y\n                                );\n                            }\n                        );\n\n                        return sts.concat(validTilesForSprite);\n                    }, []);\n\n                    return lts.concat(validSpriteTiles);\n                },\n                []\n            );\n\n            return ts.concat(validLayerTiles);\n        }, []);\n    }\n\n    const maxAnimation = Math.max(...validTiles.map(t => t.autoAnimation));\n\n    // 2 raised to maxAnimation\n    return 2 ** maxAnimation;\n}\n\nexport function createGif(\n    layers: Layer[],\n    crop: Crop | undefined,\n    delay: number,\n    onFrame: (\n        canvas: HTMLCanvasElement,\n        frameNumber: number,\n        totalFrames: number\n    ) => void,\n    onFinish: (dataUrl: string) => void\n): void {\n    // @ts-ignore\n    const encoder: any = new GIFEncoder();\n    encoder.setRepeat(FOREVER);\n    encoder.setDelay(delay);\n    encoder.setQuality(1);\n\n    encoder.start();\n\n    const totalFrames = determineNumberOfFramesToRender(layers, crop);\n    console.log(\"totalFrames\", totalFrames);\n\n    let remainingFrames = totalFrames;\n\n    const finish = () => {\n        encoder.finish();\n\n        const binaryData = encoder.stream().getData();\n\n        onFinish(`data:image/gif;base64,${btoa(binaryData)}`);\n    };\n\n    const addFrame = () => {\n        const animationCounter = totalFrames - remainingFrames;\n\n        const frameCanvas = layersToCanvas(layers, animationCounter, crop);\n        encoder.addFrame(frameCanvas.getContext(\"2d\")!);\n\n        --remainingFrames;\n\n        onFrame(frameCanvas, animationCounter, totalFrames);\n\n        if (remainingFrames) {\n            setTimeout(addFrame, 1);\n        } else {\n            setTimeout(finish, 1);\n        }\n    };\n\n    addFrame();\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { createGif } from \"../state/createGif\";\nimport { useAppState } from \"../state\";\n\ntype FrameStatus = { frame: number; totalFrames: number };\n\nfunction clear(div: HTMLDivElement) {\n    while (div.firstChild) {\n        div.removeChild(div.firstChild);\n    }\n}\n\ninterface BuildGifModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport const BuildGifModal: React.FunctionComponent<BuildGifModalProps> = ({\n    isOpen,\n    onRequestClose\n}) => {\n    const { state } = useAppState();\n    const containerRef = useRef<null | HTMLDivElement>(null);\n    const [frameStatus, setFrameStatus] = useState<null | FrameStatus>(null);\n\n    useEffect(() => {\n        if (isOpen) {\n            const delay = window.Module._get_neogeo_frame_counter_speed() * 16;\n\n            createGif(\n                state.layers,\n                state.crop,\n                delay,\n                (\n                    canvas: HTMLCanvasElement,\n                    frame: number,\n                    totalFrames: number\n                ) => {\n                    setFrameStatus({ frame, totalFrames });\n\n                    if (containerRef && containerRef.current) {\n                        clear(containerRef.current);\n                        containerRef.current.appendChild(canvas);\n                    }\n                },\n                (dataUrl: string) => {\n                    setFrameStatus(null);\n\n                    if (containerRef && containerRef.current) {\n                        clear(containerRef.current);\n                        const img = new Image();\n                        img.src = dataUrl;\n                        containerRef.current.appendChild(img);\n                    }\n                }\n            );\n        }\n    }, [isOpen, state.crop, state.layers]);\n\n    return (\n        <Modal isOpen={isOpen} onRequestClose={onRequestClose}>\n            {frameStatus && (\n                <div>\n                    {frameStatus.frame} of {frameStatus.totalFrames}\n                </div>\n            )}\n            <div ref={containerRef} />\n        </Modal>\n    );\n};\n","import React from \"react\";\nimport {\n    Layer as LayerData,\n    ExtractedSprite as ExtractedSpriteData\n} from \"../state/types\";\nimport { ExtractedSprite as ExtractedSpriteCmp } from \"./extractedSprite\";\nimport { getMaxX, getMaxY, getAllSpritesFromLayers } from \"../state/spriteUtil\";\nimport { useAppState } from \"../state\";\n\nimport styles from \"./layer.module.css\";\n\ninterface LayerProps {\n    layer: LayerData;\n    index: number;\n    runPreview: boolean;\n    animationCounter: number;\n    canDrag: boolean;\n    outlineTiles: boolean;\n}\n\nexport const Layer: React.FunctionComponent<LayerProps> = ({\n    layer,\n    index,\n    runPreview,\n    animationCounter,\n    canDrag,\n    outlineTiles\n}) => {\n    const { state } = useAppState();\n\n    if (state.hiddenLayers[layer.id]) {\n        return null;\n    }\n\n    const sprites = layer.groups.reduce<ExtractedSpriteData[]>((s, g) => {\n        if (state.hiddenGroups[g.id]) {\n            return s;\n        } else {\n            return s.concat(g.sprites);\n        }\n    }, []);\n\n    const spriteCmps = sprites.map((extractedSprite, i) => (\n        <ExtractedSpriteCmp\n            key={i}\n            data={extractedSprite}\n            autoAnimate={runPreview}\n            animationCounter={animationCounter}\n            canDrag={canDrag}\n            outlineTiles={outlineTiles}\n        />\n    ));\n\n    const extractedSprites = getAllSpritesFromLayers([layer]);\n    const maxX = getMaxX(extractedSprites);\n    const width = Math.max(maxX + 48, 320);\n\n    const maxY = getMaxY(extractedSprites);\n    const height = Math.max(maxY + 48, 240);\n\n    const style = {\n        zIndex: index,\n        width,\n        height\n    };\n\n    return (\n        <div className={styles.root} style={style}>\n            {spriteCmps}\n        </div>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Crop } from \"../state/types\";\n\nimport styles from \"./cropRect.module.css\";\n\ninterface CropRectProps {\n    className?: string;\n    crop: Crop;\n    width?: number | null;\n    height?: number | null;\n}\n\nexport const CropRect: React.FunctionComponent<CropRectProps> = ({\n    className,\n    crop,\n    width,\n    height\n}) => {\n    const classes = classnames(styles.root, className);\n\n    const topRowStyle = {\n        height: crop[0].y,\n        gridColumn: \"1 / -1\",\n        gridRow: \"1\"\n    };\n\n    const leftCellStyle = {\n        width: crop[0].x,\n        height: crop[1].y - crop[0].y,\n        gridColumn: \"1\",\n        gridRow: \"2\"\n    };\n\n    const rightCellStyle = {\n        gridColumn: \"3\",\n        gridRow: \"2\"\n    };\n\n    const cropStyle = {\n        width: crop[1].x - crop[0].x,\n        height: crop[1].y - crop[0].y,\n        gridColumn: \"2\",\n        gridRow: \"2\"\n    };\n\n    const bottomRowStyle = {\n        gridColumn: \"1 / -1\",\n        gridRow: \"3\",\n        flex: \"1\"\n    };\n\n    const containerStyle = {\n        width: width || \"100%\",\n        height: height || \"100%\"\n    };\n\n    return (\n        <div className={classes} style={containerStyle}>\n            <div className={styles.mask} style={topRowStyle} />\n            <div className={styles.mask} style={leftCellStyle} />\n            <div className={styles.crop} style={cropStyle} />\n            <div className={styles.mask} style={rightCellStyle} />\n            <div className={styles.mask} style={bottomRowStyle} />\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport {\n    getBackdropNeoGeoColor,\n    neoGeoColorToCSS\n} from \"../palette/neoGeoPalette\";\nimport { useAppState } from \"../state\";\nimport { BuildGifModal } from \"../gifBuilder/buildGifModal\";\nimport { Layer as LayerCmp } from \"./layer\";\nimport { CropRect } from \"./cropRect\";\n\nimport styles from \"./composeScreen.module.css\";\n\ninterface ComposeScreenProps {\n    className?: string;\n}\n\nexport const ComposeScreen: React.FunctionComponent<ComposeScreenProps> = ({\n    className\n}) => {\n    const [animationCounter, setAnimationCounter] = useState({\n        animation: 0,\n        rafFrameCountdown: 0\n    });\n    const [runPreview, setRunPreview] = useState(false);\n    const [showBuildGifModal, setShowBuildGifModal] = useState(false);\n    const { state, dispatch, undo, redo, canUndo, canRedo } = useAppState();\n    const [divRef, setDivRef] = useState<null | HTMLDivElement>(null);\n    const [isCropping, setIsCropping] = useState(false);\n    const [upperLeftCrop, setUpperLeftCrop] = useState<null | {\n        x: number;\n        y: number;\n    }>(null);\n    const [lowerRightCrop, setLowerRightCrop] = useState<null | {\n        x: number;\n        y: number;\n    }>(null);\n\n    useEffect(() => {\n        if (runPreview) {\n            // minus one because on my machine the animation can't quite keep up\n            const frameCountdown =\n                window.Module._get_neogeo_frame_counter_speed() - 1;\n            requestAnimationFrame(() => {\n                const diff = animationCounter.rafFrameCountdown === 0 ? 1 : 0;\n\n                setAnimationCounter({\n                    animation: animationCounter.animation + diff,\n                    rafFrameCountdown:\n                        diff === 1\n                            ? frameCountdown\n                            : animationCounter.rafFrameCountdown - 1\n                });\n            });\n        }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dropRef] = useDrop({\n        accept: [\"Sprite\", \"Sprites\"],\n        drop: (item: any, monitor: any) => {\n            if (divRef) {\n                const x =\n                    monitor.getClientOffset().x -\n                    divRef.getBoundingClientRect().left;\n\n                const composedX = Math.floor(x / 16) * 16;\n\n                if (item.type === \"Sprite\") {\n                    const spriteMemoryIndex = item.spriteMemoryIndex;\n                    const pauseId = item.pauseId;\n\n                    if (pauseId) {\n                        dispatch({\n                            type: \"MoveSprite\",\n                            spriteMemoryIndex,\n                            newComposedX: composedX,\n                            pauseId\n                        });\n                    } else {\n                        dispatch({\n                            type: \"ExtractSprite\",\n                            spriteMemoryIndex,\n                            composedX\n                        });\n                    }\n                } else {\n                    dispatch({\n                        type: \"ExtractSpritesToGroup\",\n                        spriteMemoryIndices: item.spriteMemoryIndices,\n                        composedX\n                    });\n                }\n            }\n        },\n        canDrop() {\n            return !isCropping;\n        }\n    });\n\n    const layers = state.layers.map((layer, i) => {\n        if (state.hiddenLayers[layer.id]) {\n            return null;\n        } else {\n            return (\n                <LayerCmp\n                    key={i}\n                    index={i}\n                    layer={layer}\n                    runPreview={runPreview}\n                    animationCounter={animationCounter.animation}\n                    canDrag={!isCropping}\n                    outlineTiles={state.showGrid}\n                />\n            );\n        }\n    });\n\n    const backgroundColor = state.isPaused\n        ? neoGeoColorToCSS(getBackdropNeoGeoColor())\n        : \"transparent\";\n\n    const style = {\n        backgroundColor\n    };\n\n    const finalClassName = classnames(styles.root, className);\n\n    return (\n        <>\n            <BuildGifModal\n                isOpen={showBuildGifModal}\n                onRequestClose={() => setShowBuildGifModal(false)}\n            />\n            <div className={finalClassName}>\n                <div className={styles.toolbar}>\n                    <button onClick={() => dispatch({ type: \"ToggleGrid\" })}>\n                        {state.showGrid ? \"hide\" : \"show\"} grid\n                    </button>\n                    <button\n                        disabled={isCropping}\n                        onClick={() => {\n                            setIsCropping(true);\n                            dispatch({ type: \"ClearCrop\" });\n                            setUpperLeftCrop(null);\n                            setLowerRightCrop(null);\n                        }}\n                    >\n                        crop\n                    </button>\n                    <button\n                        disabled={!state.crop}\n                        onClick={() => {\n                            dispatch({ type: \"ClearCrop\" });\n                            setUpperLeftCrop(null);\n                            setLowerRightCrop(null);\n                        }}\n                    >\n                        clear crop\n                    </button>\n                    <button onClick={() => setRunPreview(!runPreview)}>\n                        {runPreview ? \"stop\" : \"preview\"}\n                    </button>\n                    <button onClick={() => setShowBuildGifModal(true)}>\n                        build gif\n                    </button>\n                    <button disabled={!canUndo} onClick={() => undo()}>\n                        undo\n                    </button>\n                    <button disabled={!canRedo} onClick={() => redo()}>\n                        redo\n                    </button>\n                    <button onClick={() => dispatch({ type: \"PushAllDown\" })}>\n                        down\n                    </button>\n                </div>\n                <div\n                    className={styles.bg}\n                    ref={div => {\n                        setDivRef(div);\n                        dropRef(div);\n                    }}\n                    style={style}\n                >\n                    {layers}\n                    {!!(\n                        (isCropping && upperLeftCrop && lowerRightCrop) ||\n                        state.crop\n                    ) && (\n                        <CropRect\n                            width={divRef && divRef.scrollWidth}\n                            height={divRef && divRef.scrollHeight}\n                            className={styles.cropRect}\n                            crop={\n                                state.crop || [upperLeftCrop!, lowerRightCrop!]\n                            }\n                        />\n                    )}\n                    {isCropping && (\n                        <div\n                            style={\n                                divRef\n                                    ? {\n                                          width: divRef.scrollWidth,\n                                          height: divRef.scrollHeight\n                                      }\n                                    : {}\n                            }\n                            className={styles.captureLayer}\n                            onMouseDown={(\n                                e: React.MouseEvent<HTMLDivElement>\n                            ) => {\n                                if (isCropping) {\n                                    const rect = (e.target as HTMLDivElement).getBoundingClientRect() as DOMRect;\n\n                                    const rawX = e.clientX - rect.x;\n                                    const rawY = e.clientY - rect.y;\n\n                                    const x = Math.floor(rawX / 16) * 16;\n                                    const y = Math.floor(rawY / 16) * 16;\n\n                                    setUpperLeftCrop({ x, y });\n                                }\n                            }}\n                            onMouseMove={e => {\n                                if (isCropping && upperLeftCrop) {\n                                    const rect = (e.target as HTMLDivElement).getBoundingClientRect() as DOMRect;\n\n                                    const rawX = e.clientX - rect.x;\n                                    const rawY = e.clientY - rect.y;\n\n                                    const x = Math.floor(rawX / 16) * 16;\n                                    const y = Math.floor(rawY / 16) * 16;\n\n                                    setLowerRightCrop({ x, y });\n                                }\n                            }}\n                            onMouseUp={e => {\n                                if (\n                                    isCropping &&\n                                    upperLeftCrop &&\n                                    lowerRightCrop\n                                ) {\n                                    dispatch({\n                                        type: \"SetCrop\",\n                                        crop: [upperLeftCrop, lowerRightCrop]\n                                    });\n                                    setIsCropping(false);\n                                }\n                            }}\n                        />\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./iconButton.module.css\";\n\ninterface IconButtonProps {\n    className?: string;\n    title?: string;\n    icon: React.ComponentType<any>;\n    onClick?: (e: React.MouseEvent) => void;\n}\n\nexport const IconButton: React.FunctionComponent<IconButtonProps> = ({\n    className,\n    title,\n    icon,\n    onClick\n}) => {\n    const Icon = icon;\n\n    const classes = classnames(styles.root, className);\n\n    return (\n        <Icon\n            className={classes}\n            onClick={onClick}\n            title={title}\n            role=\"button\"\n            aria-label={title}\n        />\n    );\n};\n","import React from \"react\";\nimport { ExtractedSprite } from \"../state/types\";\nimport { IconButton } from \"../components/iconButton\";\nimport Delete from \"@material-ui/icons/Delete\";\n\nimport styles from \"./sprite.module.css\";\n\ninterface SpriteProps {\n    sprite: ExtractedSprite;\n    onDelete: () => void;\n}\n\nexport const Sprite: React.FunctionComponent<SpriteProps> = ({\n    sprite,\n    onDelete\n}) => {\n    return (\n        <div className={styles.root}>\n            {\" \"}\n            {sprite.spriteMemoryIndex}{\" \"}\n            <IconButton\n                icon={Delete}\n                title=\"Delete Layer\"\n                onClick={() => onDelete()}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport { ExtractedSpriteGroup as ExtractedSpriteGroupData } from \"../state/types\";\nimport { spriteGroupToDataUrl } from \"../state/toDataUrl\";\n\ninterface GroupPreviewProps {\n    group: ExtractedSpriteGroupData;\n}\n\nexport const GroupPreview: React.FunctionComponent<\n    GroupPreviewProps\n> = React.memo<GroupPreviewProps>(({ group }) => {\n    const { width: imgWidth, height: imgHeight, url } = spriteGroupToDataUrl(\n        group\n    );\n\n    const scale = 24 / Math.max(imgWidth, imgHeight);\n\n    return (\n        <img\n            width={imgWidth * scale}\n            height={imgHeight * scale}\n            src={url}\n            alt=\"sprite group thumbnail\"\n        />\n    );\n});\n","import { Layer, ExtractedSpriteGroup } from \"./types\";\nimport { layersToCanvas } from \"./layersToCanvas\";\nimport { setLayerToZeroZero, setGroupToZeroZero } from \"./spriteUtil\";\n\ntype ToDataUrlResult = {\n    url: string;\n    width: number;\n    height: number;\n};\n\nexport function layerToDataUrl(layer: Layer): ToDataUrlResult {\n    const layers = [setLayerToZeroZero(layer)];\n    const canvas = layersToCanvas(layers);\n\n    return {\n        url: canvas.toDataURL(\"image/png\"),\n        width: canvas.width,\n        height: canvas.height\n    };\n}\n\nexport function spriteGroupToDataUrl(\n    group: ExtractedSpriteGroup\n): ToDataUrlResult {\n    const layers = [{ id: 0, groups: [setGroupToZeroZero(group)] }];\n    const canvas = layersToCanvas(layers);\n\n    return {\n        url: canvas.toDataURL(\"image/png\"),\n        width: canvas.width,\n        height: canvas.height\n    };\n}\n","import React, { useState } from \"react\";\nimport { useAppState } from \"../state\";\nimport { ExtractedSpriteGroup } from \"../state/types\";\nimport { IconButton } from \"../components/iconButton\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport { IoIosEye, IoIosEyeOff } from \"react-icons/io\";\nimport { Sprite } from \"./sprite\";\nimport { GroupPreview } from \"./groupPreview\";\n\nimport styles from \"./group.module.css\";\n\ninterface GroupProps {\n    group: ExtractedSpriteGroup;\n    onDelete: () => void;\n    onToggleVisibility: () => void;\n}\n\nexport const Group: React.FunctionComponent<GroupProps> = ({\n    group,\n    onDelete,\n    onToggleVisibility\n}) => {\n    const { dispatch, state } = useAppState();\n    const [showSprites, setShowSprites] = useState(false);\n\n    let sprites = null;\n\n    if (showSprites) {\n        sprites = group.sprites.map((sprite, i) => (\n            <Sprite\n                key={i}\n                sprite={sprite}\n                onDelete={() =>\n                    dispatch({\n                        type: \"RemoveSpriteFromExtractedGroup\",\n                        group,\n                        sprite\n                    })\n                }\n            />\n        ));\n    }\n\n    return (\n        <div className={styles.root}>\n            <div className={styles.toolbar}>\n                <IconButton\n                    icon={showSprites ? ExpandLess : ExpandMore}\n                    title=\"Show sprites\"\n                    onClick={() => setShowSprites(!showSprites)}\n                />\n                <GroupPreview group={group} />\n                <div>\n                    {(group.sprites[0] && group.sprites[0].spriteMemoryIndex) ||\n                        \"empty\"}\n                </div>\n                <IconButton\n                    icon={state.hiddenGroups[group.id] ? IoIosEyeOff : IoIosEye}\n                    onClick={() => onToggleVisibility()}\n                    title={`Group is ${\n                        state.hiddenLayers[group.id] ? \"hidden\" : \"visible\"\n                    }`}\n                />\n                <IconButton\n                    icon={Delete}\n                    title=\"Delete Group\"\n                    onClick={() => onDelete()}\n                />\n            </div>\n            <div className={styles.spriteContainer}>{sprites}</div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Layer as LayerData } from \"../state/types\";\nimport { layerToDataUrl } from \"../state/toDataUrl\";\n\ninterface LayerPreviewProps {\n    layer: LayerData;\n}\n\nexport const LayerPreview: React.FunctionComponent<\n    LayerPreviewProps\n> = React.memo<LayerPreviewProps>(({ layer }) => {\n    const { width: imgWidth, height: imgHeight, url } = layerToDataUrl(layer);\n\n    const scale = 48 / imgHeight;\n\n    return (\n        <img\n            width={imgWidth * scale}\n            height={imgHeight * scale}\n            src={url}\n            alt=\"layer thumbnail\"\n        />\n    );\n});\n","import React, { useState } from \"react\";\nimport { useAppState } from \"../state\";\nimport { Layer as LayerData, ExtractedSpriteGroup } from \"../state/types\";\nimport { IconButton } from \"../components/iconButton\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport VerticalAlignBottom from \"@material-ui/icons/VerticalAlignBottom\";\nimport {\n    IoIosEye,\n    IoIosEyeOff,\n    IoIosReorder,\n    IoIosPhoneLandscape\n} from \"react-icons/io\";\nimport { Group } from \"./group\";\nimport { LayerPreview } from \"./layerPreview\";\n\nimport styles from \"./layer.module.css\";\n\ninterface LayerProps {\n    layer: LayerData;\n    onGroupDelete: (group: ExtractedSpriteGroup) => void;\n    onGroupToggleVisibility: (group: ExtractedSpriteGroup) => void;\n    onDelete: () => void;\n    onToggleVisibility: () => void;\n    onExtendViaMirror: () => void;\n    onPushDown: () => void;\n}\n\nexport const Layer: React.FunctionComponent<LayerProps> = ({\n    layer,\n    onDelete,\n    onToggleVisibility,\n    onGroupDelete,\n    onGroupToggleVisibility,\n    onExtendViaMirror,\n    onPushDown\n}) => {\n    const { dispatch, state } = useAppState();\n    const [showGroups, setShowGroups] = useState(true);\n\n    const groups = layer.groups.map((group, i) => (\n        <Group\n            key={i}\n            group={group}\n            onDelete={() => onGroupDelete(group)}\n            onToggleVisibility={() => onGroupToggleVisibility(group)}\n        />\n    ));\n\n    return (\n        <div className={styles.root}>\n            <div className={styles.toolbar}>\n                <IconButton\n                    icon={showGroups ? ExpandLess : ExpandMore}\n                    title=\"Show groups\"\n                    onClick={() => setShowGroups(!showGroups)}\n                />\n                <LayerPreview layer={layer} />\n                <IconButton\n                    icon={IoIosReorder}\n                    onClick={() => dispatch({ type: \"RotateLayer\", layer })}\n                    title=\"Rotate tiles\"\n                />\n                <IconButton\n                    icon={IoIosPhoneLandscape}\n                    onClick={() => onExtendViaMirror()}\n                    title=\"Mirror\"\n                />\n                <IconButton\n                    icon={VerticalAlignBottom}\n                    onClick={() => onPushDown()}\n                    title=\"Push Down\"\n                />\n                <IconButton\n                    icon={state.hiddenLayers[layer.id] ? IoIosEyeOff : IoIosEye}\n                    onClick={() => onToggleVisibility()}\n                    title={`Layer is ${\n                        state.hiddenLayers[layer.id] ? \"hidden\" : \"visible\"\n                    }`}\n                />\n                <IconButton\n                    icon={Delete}\n                    title=\"Delete Layer\"\n                    onClick={() => onDelete()}\n                />\n            </div>\n            {showGroups && groups}\n        </div>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { useAppState } from \"../state\";\nimport { IconButton } from \"../components/iconButton\";\nimport { IoIosAdd } from \"react-icons/io\";\nimport { Layer } from \"./layer\";\n\nimport styles from \"./layers.module.css\";\n\ninterface LayersProps {\n    className?: string;\n}\n\nexport const Layers: React.FunctionComponent<LayersProps> = ({ className }) => {\n    const { state, dispatch } = useAppState();\n\n    const classes = classnames(styles.root, className);\n\n    // reverse layers due to wanting the highest z-index layer to be at the top of\n    // the list, which is opposite of how they are stored\n    const layers = [...state.layers]\n        .reverse()\n        .map((layer, i) => (\n            <Layer\n                key={i}\n                layer={layer}\n                onDelete={() => dispatch({ type: \"DeleteLayer\", layer })}\n                onToggleVisibility={() =>\n                    dispatch({ type: \"ToggleVisibilityOfLayer\", layer })\n                }\n                onGroupDelete={group =>\n                    dispatch({ type: \"DeleteGroup\", group })\n                }\n                onGroupToggleVisibility={group =>\n                    dispatch({ type: \"ToggleVisibilityOfGroup\", group })\n                }\n                onExtendViaMirror={() =>\n                    dispatch({ type: \"ExtendLayerViaMirror\", layer })\n                }\n                onPushDown={() => dispatch({ type: \"PushDownLayer\", layer })}\n            />\n        ));\n\n    return (\n        <div className={classes}>\n            <IconButton\n                className={styles.buttonIcon}\n                icon={IoIosAdd}\n                onClick={() => dispatch({ type: \"NewLayer\" })}\n                title=\"New Layer\"\n            />\n            {layers}\n        </div>\n    );\n};\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./app\";\n\nimport \"./index.css\";\n\nModal.setAppElement(\"#root\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { Provider as AppStateProvider } from \"./state/provider\";\nimport { DragPreviewLayer } from \"./dragPreviewLayer\";\nimport { Emulator } from \"./emulator\";\nimport { SpriteTray } from \"./spriteTray\";\nimport { ComposeScreen } from \"./composeScreen\";\nimport { Layers } from \"./layers\";\n\nimport styles from \"./app.module.css\";\n\nexport const App: React.FunctionComponent = () => {\n    return (\n        <AppStateProvider>\n            <DndProvider backend={HTML5Backend}>\n                <DragPreviewLayer />\n                <div className={styles.app}>\n                    <div className={styles.composeScreenTrayGrid}>\n                        <ComposeScreen className={styles.composeScreen} />\n                        <SpriteTray className={styles.spriteTray} />\n                    </div>\n                    <div className={styles.emulatorLayersGrid}>\n                        <Emulator className={styles.emulator} />\n                        <Layers className={styles.layers} />\n                    </div>\n                </div>\n            </DndProvider>\n        </AppStateProvider>\n    );\n};\n"],"sourceRoot":""}