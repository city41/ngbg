{"version":3,"sources":["spriteTray/spriteEntry.module.css","spriteTray/spriteTray.module.css","spriteTray/sprite.module.css","emulator/emulator.module.css","spriteTray/tile.module.css","composeScreen/extractedTile.module.css","composeScreen/extractedSprite.module.css","composeScreen/composeScreen.module.css","state/spriteData.ts","palette/neoGeoPalette.ts","state/extractSpriteGroup.ts","state/state.tsx","emulator/emulator.tsx","state/renderTileToCanvas.ts","spriteTray/tile.tsx","spriteTray/sprite.tsx","spriteTray/spriteEntry.tsx","spriteTray/spriteTray.tsx","composeScreen/extractedTile.tsx","composeScreen/extractedSprite.tsx","composeScreen/composeScreen.tsx","state/jsgif/LZWEncoder.js","state/jsgif/NeuQuant.js","state/jsgif/GIFEncoder.js","state/spriteGroupToCanvas.ts","state/createGif_jsgif.ts","gifBuilder/buildImage.tsx","index.tsx","App.tsx"],"names":["module","exports","SCB1_SPRITE_SIZE_BYTES","SCB2_BYTE_OFFSET","SCB3_BYTE_OFFSET","SCB4_BYTE_OFFSET","getTileData","spriteIndex","spriteSize","tileYs","tileRamAddr","window","Module","_get_tile_ram_addr","spriteOffset","spriteData","i","HEAPU8","tileData","w","length","firstWord","secondWord","tileIndex","autoAnimation","paletteIndex","horizontalFlip","verticalFlip","push","y","getYSpriteSizeSticky","Error","spriteScb3Addr","scb3Word","sticky","rawY","yScale","fullmode","transformY","getScale","ignoreSticky","t","getX","x","xScale","spriteScb4Addr","options","spriteScb2Addr","scb2Word","getSpriteData","honorTileSize","tiles","COLORS_PER_PALETTE","PALETTE_SIZE_IN_BYTES","convertNeoGeoColorToRGBColor","col16","darkBit","getNeoGeoPalette","paletteMemoryIndex","palIndexInHeap","_get_current_pal_addr","HEAPU16","slice","convertNeoGeoPaletteToRGB","neoGeoPalette","mapped","map","convertTileDataToExtractedTile","rest","composedY","rgbPalette","extractSpriteGroup","spriteMemoryIndex","composedX","pauseId","sprites","rootSpriteIndex","spriteMemoryIndices","getSpriteGroup","smi","screenX","screenY","group","forEach","s","initialState","hasStarted","isPaused","extractedSpriteGroups","reducer","state","action","type","nowPaused","currentSpriteGroup","find","sg","some","focusedGroup","allGroups","newComposedX","xDiff","filter","moveRelatedGroups","newSpriteGroup","oldSpriteGroups","esg","a","b","aIndices","es","sort","bIndices","isEqual","haveSameSprites","newGroup","oldGroups","sameGroup","og","screenToComposeDiffX","positionSpriteGroupInRelationToExistingGroups","_","assertUnreachable","stateContext","createContext","dispatchContext","Provider","children","useReducer","dispatch","value","useAppState","useContext","TOGGLE_PAUSE","START_EMULATION","loadFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","name","readAsArrayBuffer","addFileToVirtualFS","data","FS_createDataFile","Uint8Array","Emulator","props","useState","gameName","setGameName","e","target","files","replace","classes","classnames","styles","root","className","id","onChange","onClick","overrideGameName","argv","stackAlloc","HEAP32","allocateUTF8OnStack","_run_rom","startGame","disabled","resumeMainLoop","pauseMainLoop","TILE_SIZE_BYTES","TILE_SIZE_INTS","0","1","2","3","4","5","6","7","renderTileToCanvas","canvas","cromAddr","_get_rom_ctile_addr","tileOffset","width","height","context","getContext","imageData","getImageData","pixelPair","rightPixelColorIndex","leftPixel","rightPixel","putImageData","Tile","this","tileY","positioned","verticalScale","inlineStyle","transform","top","ref","r","renderCanvas","style","React","PureComponent","Sprite","overrideX","useDrag","item","dragRef","key","left","gridTemplateRows","zIndex","spriteClassName","sprite","SpriteEntry","render","hideIfEmpty","focused","hide","isSpriteEmpty","index","spriteContainer","SpriteTray","focusedIndices","setFocusedIndices","shiftStartIndex","setShiftStartIndex","locked","spriteEntries","gridTemplateColumns","Array","fill","ctrlKey","concat","shiftKey","minIndex","Math","min","maxIndex","max","minValue","maxValue","count","arrayFrom","indexOf","ExtractedTile","ExtractedSprite","autoAnimate","animationCounter","ComposeScreen","animation","rafFrameCountdown","setAnimationCounter","runPreview","setRunPreview","divRef","setDivRef","useEffect","frameCountdown","_get_neogeo_frame_counter_speed","requestAnimationFrame","diff","useDrop","accept","drop","monitor","getClientOffset","getBoundingClientRect","floor","extractSpriteAction","dropRef","extractedSprites","reduce","extractedSprite","backgroundColor","neoGeoColor","asArray","neoGeoColorToCSS","palAddr","getBackdropNeoGeoColor","maxX","finalClassName","div","LZWEncoder","imgW","imgH","pixAry","initCodeSize","remaining","curPixel","n_bits","maxcode","g_init_bits","ClearCode","EOFCode","a_count","EOF","BITS","HSIZE","maxbits","maxmaxcode","htab","codetab","hsize","free_ent","clear_flg","cur_accum","cur_bits","masks","accum","pixels","color_depth","char_out","c","outs","flush_char","cl_block","cl_hash","output","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","MAXCODE","nextPixel","outer_loop","encode","os","writeByte","writeBytes","code","apply","arguments","NeuQuant","alphadec","thepicture","lengthcount","samplefac","network","netsize","prime1","prime2","prime3","prime4","minpicturebytes","maxnetpos","netbiasshift","ncycles","intbiasshift","intbias","gammashift","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","netindex","bias","freq","radpower","thepic","len","sample","p","colorMap","k","l","j","inxbuild","smallpos","smallval","q","previouscol","startpos","learn","g","radius","rad","alpha","step","delta","samplepixels","pix","lim","contest","altersingle","alterneigh","unbiasnet","dist","bestd","best","process","lo","hi","m","n","biasdist","betafreq","bestpos","bestbiaspos","bestbiasd","GIFEncoder","chr","String","fromCharCode","ByteArray","bin","prototype","getData","v","val","writeUTFBytes","string","charCodeAt","array","offset","transIndex","out","image","indexedPixels","colorDepth","colorTab","transparent","repeat","delay","started","usedEntry","palSize","dispose","closeStream","firstFrame","sizeSet","comment","reset","setDelay","ms","round","setDispose","setRepeat","iter","setTransparent","setComment","addFrame","im","is_imageData","ok","ImageData","setSize","Uint8ClampedArray","console","log","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeCommentExt","writeImageDesc","writePixels","download","filename","undefined","endsWith","templink","document","createElement","href","URL","createObjectURL","Blob","click","finish","setFrameRate","fps","setQuality","quality","h","start","cont","nPix","nq","findClosest","minpos","dmin","dr","dg","db","d","transp","WriteShort","pValue","stream","setProperties","has_start","is_first","spriteGroupToCanvas","spriteGroups","dimensions","building","getDimensions","tile","tileCanvas","translateX","translateY","newCanvas","save","translate","scale","drawImage","restore","flip","TOTAL_FRAMES","FOREVER","BuildImage","dataUrl","setDataUrl","setWidth","setHeight","encoder","frameCanvas","binaryData","btoa","createGif","Number","src","ReactDOM","backend","HTML5Backend","size","getElementById"],"mappings":"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","file":"static/js/main.f651abea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"spriteEntry_root__21-Rc\",\"hide\":\"spriteEntry_hide__1KLBL\",\"index\":\"spriteEntry_index__3_j9A\",\"focused\":\"spriteEntry_focused__2e2R9\",\"spriteContainer\":\"spriteEntry_spriteContainer__3BESY\",\"sprite\":\"spriteEntry_sprite__3D55Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"spriteTray_root__1Sixf\",\"locked\":\"spriteTray_locked__Lvuwa\",\"spriteEntries\":\"spriteTray_spriteEntries__16oai\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sprite\":\"sprite_sprite__38hI5\",\"positioned\":\"sprite_positioned__16NC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"emulator_root__3kH7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"positioned\":\"tile_positioned__9EsHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"extractedTile_root__14wnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"extractedSprite_root__gpe6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"composeScreen_root__3bwon\"};","// ALERT!\n// vram addresses in the neo geo are word wide, not byte wide!\n// TODO: can probably just use HEAPU16 and make this all much simpler\n// ALERT!\n\n// in SCB1,\n// each sprite has 64, 16-bit, words\nconst SCB1_SPRITE_SIZE_BYTES = 64 * 2;\n\n// it starts at word $8000, so *2 to get byte address\nconst SCB2_BYTE_OFFSET = 0x8000 * 2;\n\n// it starts at word $8200, so *2 to get byte address\nconst SCB3_BYTE_OFFSET = 0x8200 * 2;\n\n// it starts at word $8400, so *2 to get byte address\nconst SCB4_BYTE_OFFSET = 0x8400 * 2;\n\nexport interface TileData {\n    y: number;\n    tileIndex: number;\n    paletteIndex: number;\n    horizontalFlip: boolean;\n    verticalFlip: boolean;\n    autoAnimation: 0 | 2 | 3;\n}\n\ninterface SpriteData {\n    tiles: TileData[];\n    x: number;\n    y: number;\n    sticky: boolean;\n    spriteSize: number;\n}\n\nfunction getTileData(\n    spriteIndex: number,\n    spriteSize: number,\n    tileYs: number[]\n): TileData[] {\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const spriteOffset = SCB1_SPRITE_SIZE_BYTES * spriteIndex;\n\n    const spriteData: number[] = [];\n\n    for (let i = 0; i < spriteSize * 4; ++i) {\n        spriteData[i] = window.HEAPU8[tileRamAddr + spriteOffset + i];\n    }\n\n    const tileData = [];\n\n    for (let w = 0; w < spriteData.length; w += 4) {\n        const firstWord = spriteData[w] | (spriteData[w + 1] << 8);\n        const secondWord = spriteData[w + 2] | (spriteData[w + 3] << 8);\n\n        // first word = least sig bits of tile index\n        // second word, bits 4 through 7 = most sig bits of tile index\n        let tileIndex = firstWord | (((secondWord >> 4) & 0xf) << 16);\n\n        let autoAnimation: 0 | 2 | 3 = 0;\n\n        // automatic animation\n        if (secondWord & 0x8) {\n            autoAnimation = 3;\n        } else if (secondWord & 0x4) {\n            autoAnimation = 2;\n        }\n\n        // top half of second word is the palette index\n        const paletteIndex = (secondWord >> 8) & 0xff;\n\n        const horizontalFlip = !!(secondWord & 1);\n        const verticalFlip = !!(secondWord & 2);\n\n        tileData.push({\n            y: tileYs[w / 4],\n            tileIndex,\n            paletteIndex,\n            horizontalFlip,\n            verticalFlip,\n            autoAnimation\n        });\n    }\n\n    return tileData;\n}\n\nfunction transformY(rawY: number, yScale: number, spriteSize: number): number {\n    let fullmode;\n\n    if (spriteSize === 0x20) {\n        fullmode = 1;\n    } else if (spriteSize >= 0x21) {\n        fullmode = 2;\n    } else {\n        fullmode = 0;\n    }\n\n    // getting the final screen y is very complicated and\n    // honestly don't fully understand it. This code was copied\n    // from gngeo, video.c#draw_screen()\n    let y = 0x200 - rawY;\n\n    if (y > 0x110) {\n        y -= 0x200;\n    }\n\n    if (fullmode === 2 || (fullmode === 1 && yScale === 0xff)) {\n        while (y < 0) {\n            y += (yScale + 1) << 1;\n        }\n    }\n\n    return y;\n}\n\nfunction getYSpriteSizeSticky(\n    spriteIndex: number\n): { y: number; tileYs: number[]; spriteSize: number; sticky: boolean } {\n    if (spriteIndex < 0) {\n        throw new Error(\"getYSpriteSizeSticky: sprite index under zero!\");\n    }\n\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const scb3StartAddr = tileRamAddr + SCB3_BYTE_OFFSET;\n\n    const spriteScb3Addr = scb3StartAddr + spriteIndex * 2;\n\n    const scb3Word =\n        window.HEAPU8[spriteScb3Addr] |\n        (window.HEAPU8[spriteScb3Addr + 1] << 8);\n\n    const sticky = !!((scb3Word >> 6) & 1);\n\n    if (sticky) {\n        return {\n            ...getYSpriteSizeSticky(spriteIndex - 1),\n            sticky\n        };\n    } else {\n        const yScale = getScale(spriteIndex, { ignoreSticky: true }).yScale;\n        const spriteSize = scb3Word & 0x3f;\n        const rawY = scb3Word >> 7;\n\n        const y = transformY(rawY, yScale, spriteSize);\n        const tileYs = [];\n\n        for (let t = 0; t < spriteSize; ++t) {\n            tileYs.push((y + 16 * t) % 512);\n        }\n\n        return { y, tileYs, spriteSize, sticky };\n    }\n}\n\nfunction getX(spriteIndex: number): number {\n    if (spriteIndex < 0) {\n        throw new Error(\"getX: sprite index under zero!\");\n    }\n\n    const sticky = getYSpriteSizeSticky(spriteIndex).sticky;\n\n    let x;\n\n    if (sticky) {\n        const xScale = getScale(spriteIndex).xScale;\n        x = getX(spriteIndex - 1) + xScale;\n    } else {\n        const tileRamAddr = window.Module._get_tile_ram_addr();\n        const scb4StartAddr = tileRamAddr + SCB4_BYTE_OFFSET;\n\n        const spriteScb4Addr = scb4StartAddr + spriteIndex * 2;\n\n        const scb4Word =\n            window.HEAPU8[spriteScb4Addr] |\n            (window.HEAPU8[spriteScb4Addr + 1] << 8);\n\n        x = scb4Word >> 7;\n    }\n\n    if (x >= 0x1f0) {\n        x -= 0x200;\n    }\n\n    return x;\n}\n\nfunction getScale(\n    spriteIndex: number,\n    options?: { ignoreSticky: boolean }\n): { yScale: number; xScale: number } {\n    if (spriteIndex < 0) {\n        throw new Error(\"getScale: sprite index under zero!\");\n    }\n\n    if (!options || !options.ignoreSticky) {\n        const sticky = getYSpriteSizeSticky(spriteIndex).sticky;\n\n        if (sticky) {\n            return getScale(spriteIndex - 1);\n        }\n    }\n\n    const tileRamAddr = window.Module._get_tile_ram_addr();\n    const scb2StartAddr = tileRamAddr + SCB2_BYTE_OFFSET;\n    const spriteScb2Addr = scb2StartAddr + spriteIndex * 2;\n\n    const scb2Word =\n        window.HEAPU8[spriteScb2Addr] |\n        (window.HEAPU8[spriteScb2Addr + 1] << 8);\n\n    const yScale = scb2Word & 0xff;\n    const xScale = ((scb2Word >> 8) & 0xf) + 1;\n\n    return { yScale, xScale };\n}\n\nexport function getSpriteData(\n    spriteIndex: number,\n    honorTileSize: boolean\n): SpriteData {\n    const { sticky, y, tileYs, spriteSize } = getYSpriteSizeSticky(spriteIndex);\n\n    return {\n        tiles: getTileData(\n            spriteIndex,\n            honorTileSize ? spriteSize : 32,\n            tileYs\n        ),\n        x: getX(spriteIndex),\n        sticky,\n        y,\n        spriteSize\n    };\n}\n\nexport function isSpriteEmpty(spriteIndex: number): boolean {\n    return getYSpriteSizeSticky(spriteIndex).spriteSize === 0;\n}\n","// each palette has 16 colors, each color is a 16 bit rgb value\nconst COLORS_PER_PALETTE = 16;\nconst PALETTE_SIZE_IN_BYTES = COLORS_PER_PALETTE * 2;\n\n/**\n * Convert from a neo geo palette color to a 32 rgb color\n * https://wiki.neogeodev.org/index.php?title=Colors\n */\nfunction convertNeoGeoColorToRGBColor(\n    col16: number\n): [number, number, number, number] {\n    // the least significant bit is shared by each channel\n    // if it is zero, the entire color is a tad darker, hence the name \"dark bit\"\n    const darkBit = (col16 >> 15) & 1;\n\n    const upperB = (col16 & 0xf) << 2;\n    const lowerB = ((col16 >> 12) & 1) << 1;\n    const b5 = upperB | lowerB | darkBit;\n\n    const upperG = ((col16 >> 4) & 0xf) << 2;\n    const lowerG = ((col16 >> 13) & 1) << 1;\n    const g5 = upperG | lowerG | darkBit;\n\n    const upperR = ((col16 >> 8) & 0xf) << 2;\n    const lowerR = ((col16 >> 14) & 1) << 1;\n    const r5 = upperR | lowerR | darkBit;\n\n    // neo geo color channels are six bits (max value of 63), but need to map\n    // them to a 8 bit color channel (max value of 255)\n    const b = (b5 / 63) * 255;\n    const g = (g5 / 63) * 255;\n    const r = (r5 / 63) * 255;\n\n    return [r, g, b, 255];\n}\n\nexport function getNeoGeoPalette(paletteMemoryIndex: number): number[] {\n    const palAddr = window.Module._get_current_pal_addr();\n    const palOffset = paletteMemoryIndex * PALETTE_SIZE_IN_BYTES;\n    const palIndexInHeap = (palAddr + palOffset) / 2;\n\n    return [\n        ...window.Module.HEAPU16.slice(\n            palIndexInHeap,\n            palIndexInHeap + COLORS_PER_PALETTE\n        )\n    ];\n}\n\nexport function convertNeoGeoPaletteToRGB(\n    neoGeoPalette: number[]\n): Array<[number, number, number, number]> {\n    const mapped = neoGeoPalette.map(convertNeoGeoColorToRGBColor);\n\n    // the first color is always transparent\n    return [[0, 0, 0, 0], ...mapped.slice(1)];\n}\n\nexport function getRgbFromNeoGeoPalette(\n    paletteIndex: number,\n    colorIndex: number\n): number[] {\n    if (colorIndex === 0) {\n        return [0, 0, 0, 0];\n    }\n\n    const palAddr = window.Module._get_current_pal_addr();\n    const palOffset = paletteIndex * PALETTE_SIZE_IN_BYTES;\n    const colorOffset = colorIndex * 2;\n\n    const color: number[] = [];\n\n    for (let i = 0; i < 2; ++i) {\n        color[i] = window.HEAPU8[palAddr + palOffset + colorOffset + i];\n    }\n\n    const combinedColor = color[0] | (color[1] << 8);\n\n    return convertNeoGeoColorToRGBColor(combinedColor);\n}\n\nexport function getBackdropNeoGeoColor(): number {\n    let palAddr = window.Module._get_current_pal_addr();\n\n    // get to the final color in all the palettes, ie the backdrop color\n    // https://wiki.neogeodev.org/index.php?title=Palettes\n    palAddr += 0x1ffe;\n\n    // since we are going to use HEAPU16, divide the address by two\n    palAddr /= 2;\n\n    return window.Module.HEAPU16[palAddr];\n}\n\nexport function neoGeoColorToCSS(neoGeoColor: number): string {\n    const asArray = convertNeoGeoColorToRGBColor(neoGeoColor);\n\n    return `rgb(${asArray[0]}, ${asArray[1]}, ${asArray[2]})`;\n}\n","import { ExtractedSpriteGroup, ExtractedSprite, ExtractedTile } from \"./types\";\nimport { getSpriteData, TileData } from \"./spriteData\";\nimport {\n    getNeoGeoPalette,\n    convertNeoGeoPaletteToRGB\n} from \"../palette/neoGeoPalette\";\n\nfunction convertTileDataToExtractedTile(tileData: TileData): ExtractedTile {\n    const { y, paletteIndex, ...rest } = tileData;\n    const neoGeoPalette = getNeoGeoPalette(tileData.paletteIndex);\n    const rgbPalette = convertNeoGeoPaletteToRGB(neoGeoPalette);\n\n    return {\n        ...rest,\n        composedY: y,\n        neoGeoPalette,\n        rgbPalette\n    };\n}\n\nfunction getSpriteGroup(spriteMemoryIndex: number): number[] {\n    let rootSpriteIndex = spriteMemoryIndex;\n\n    let spriteData = getSpriteData(rootSpriteIndex, true);\n\n    while (spriteData.sticky && rootSpriteIndex > 0) {\n        rootSpriteIndex -= 1;\n        spriteData = getSpriteData(rootSpriteIndex, true);\n    }\n\n    const spriteMemoryIndices = [];\n\n    do {\n        spriteMemoryIndices.push(rootSpriteIndex);\n        rootSpriteIndex += 1;\n        spriteData = getSpriteData(rootSpriteIndex, true);\n    } while (spriteData.sticky);\n\n    return spriteMemoryIndices;\n}\n\ntype ExtractedSpriteMinusGroup = Omit<ExtractedSprite, \"group\">;\n\nexport function extractSpriteGroup(\n    spriteMemoryIndex: number,\n    composedX: number,\n    pauseId: number\n): ExtractedSpriteGroup {\n    const allSpriteMemoryIndices = getSpriteGroup(spriteMemoryIndex);\n\n    const sprites: ExtractedSpriteMinusGroup[] = allSpriteMemoryIndices.map(\n        (smi, i) => {\n            const spriteData = getSpriteData(smi, true);\n            return {\n                spriteMemoryIndex: smi,\n                tiles: spriteData.tiles.map(convertTileDataToExtractedTile),\n                screenX: spriteData.x,\n                screenY: spriteData.y,\n                composedX: composedX + i * 16,\n                composedY: spriteData.y\n            };\n        }\n    );\n\n    const group: ExtractedSpriteGroup = {\n        pauseId,\n        sprites: sprites as ExtractedSprite[]\n    };\n\n    sprites.forEach(s => ((s as ExtractedSprite).group = group));\n\n    return group;\n}\n","import React, {\n    createContext,\n    useContext,\n    useReducer,\n    Dispatch,\n    FunctionComponent\n} from \"react\";\nimport { AppState, ExtractedSpriteGroup } from \"./types\";\nimport { extractSpriteGroup } from \"./extractSpriteGroup\";\nimport { isEqual } from \"lodash\";\n\nexport interface Action {\n    type: \"StartEmulation\" | \"TogglePause\" | \"ExtractSprite\";\n}\n\nexport interface ExtractSpriteAction {\n    type: \"ExtractSprite\";\n    spriteMemoryIndex: number;\n    composedX: number;\n    pauseId?: number;\n}\n\nexport const initialState: AppState = {\n    hasStarted: false,\n    isPaused: false,\n    pauseId: 0,\n    extractedSpriteGroups: []\n};\n\nfunction assertUnreachable(_: never): never {\n    throw new Error(\"Non exhaustive switch statement\");\n}\n\nfunction haveSameSprites(a: ExtractedSpriteGroup, b: ExtractedSpriteGroup) {\n    const aIndices = a.sprites.map(es => es.spriteMemoryIndex).sort();\n    const bIndices = b.sprites.map(es => es.spriteMemoryIndex).sort();\n\n    return isEqual(aIndices, bIndices);\n}\n\n/**\n * Given a newly formed sprite group, if there are other sprite groups already from the same pauseId,\n * then position this new group relative to them. This makes it so the user doesn't have to try and manually\n * line up groups.\n *\n * example: Samurai Shodown title screen. User drags in background, then drags in \"Samurai\" sprite, the \"Samurai\"\n * sprite will position itself properly on top of the background\n */\nfunction positionSpriteGroupInRelationToExistingGroups(\n    newGroup: ExtractedSpriteGroup,\n    oldGroups: ExtractedSpriteGroup[]\n) {\n    const sameGroup = oldGroups.find(og => og.pauseId === newGroup.pauseId);\n\n    // first sprite from this pauseId? Then there is nothing to position\n    if (!sameGroup) {\n        return;\n    }\n\n    const screenToComposeDiffX =\n        sameGroup.sprites[0].composedX - sameGroup.sprites[0].screenX;\n\n    newGroup.sprites.forEach(\n        s => (s.composedX = s.screenX + screenToComposeDiffX)\n    );\n}\n\nfunction moveRelatedGroups(\n    focusedGroup: ExtractedSpriteGroup,\n    allGroups: ExtractedSpriteGroup[],\n    newComposedX: number\n) {\n    const xDiff = newComposedX - focusedGroup.sprites[0].composedX;\n\n    const sameGroup = allGroups.filter(\n        sg => sg.pauseId === focusedGroup.pauseId\n    );\n\n    sameGroup.forEach(group => {\n        group.sprites.forEach(s => {\n            s.composedX += xDiff;\n        });\n    });\n}\n\nexport function reducer(state: AppState, action: Action): AppState {\n    switch (action.type) {\n        case \"StartEmulation\":\n            return {\n                ...state,\n                hasStarted: true\n            };\n        case \"TogglePause\":\n            const nowPaused = !state.isPaused;\n            return {\n                ...state,\n                isPaused: nowPaused,\n                pauseId: nowPaused ? state.pauseId + 1 : state.pauseId\n            };\n        case \"ExtractSprite\":\n            const {\n                spriteMemoryIndex,\n                composedX,\n                pauseId\n            } = action as ExtractSpriteAction;\n\n            if (pauseId) {\n                const currentSpriteGroup = state.extractedSpriteGroups.find(\n                    sg => {\n                        return (\n                            sg.pauseId === pauseId &&\n                            sg.sprites.some(\n                                s => s.spriteMemoryIndex === spriteMemoryIndex\n                            )\n                        );\n                    }\n                );\n\n                if (!currentSpriteGroup) {\n                    throw new Error(\n                        \"Something is wrong, ExtractSprite action failed to find a matching currentSpriteGroup\"\n                    );\n                }\n\n                moveRelatedGroups(\n                    currentSpriteGroup,\n                    state.extractedSpriteGroups,\n                    composedX\n                );\n\n                return {\n                    ...state,\n                    extractedSpriteGroups: state.extractedSpriteGroups\n                };\n            } else {\n                const newSpriteGroup = extractSpriteGroup(\n                    spriteMemoryIndex,\n                    composedX,\n                    state.pauseId\n                );\n\n                const oldSpriteGroups = state.extractedSpriteGroups.filter(\n                    esg =>\n                        esg.pauseId !== newSpriteGroup.pauseId ||\n                        !haveSameSprites(esg, newSpriteGroup)\n                );\n                positionSpriteGroupInRelationToExistingGroups(\n                    newSpriteGroup,\n                    oldSpriteGroups\n                );\n\n                return {\n                    ...state,\n                    extractedSpriteGroups: [...oldSpriteGroups, newSpriteGroup]\n                };\n            }\n    }\n\n    return assertUnreachable(action.type);\n}\n\nconst stateContext = createContext(initialState);\nconst dispatchContext = createContext((() => 0) as Dispatch<Action>);\n\nexport const Provider: FunctionComponent = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <dispatchContext.Provider value={dispatch}>\n            <stateContext.Provider value={state}>\n                {children}\n            </stateContext.Provider>\n        </dispatchContext.Provider>\n    );\n};\n\nexport function useAppState(): [AppState, Dispatch<Action>] {\n    return [useContext(stateContext), useContext(dispatchContext)];\n}\n\nexport const TOGGLE_PAUSE: Action = {\n    type: \"TogglePause\"\n};\n\nexport const START_EMULATION: Action = {\n    type: \"StartEmulation\"\n};\n\nexport function extractSpriteAction(\n    spriteMemoryIndex: number,\n    composedX: number,\n    pauseId: number\n): ExtractSpriteAction {\n    return {\n        type: \"ExtractSprite\",\n        spriteMemoryIndex,\n        composedX,\n        pauseId\n    };\n}\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\nimport { useAppState, START_EMULATION, TOGGLE_PAUSE } from \"../state\";\n\nimport styles from \"./emulator.module.css\";\n\ninterface EmulatorProps {\n    className?: string;\n}\n\nfunction loadFile<T>(file: File): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            if (reader.result) {\n                resolve((reader.result as unknown) as T);\n            } else {\n                reject(`Failed to load: ${file.name}`);\n            }\n        });\n\n        reader.readAsArrayBuffer(file);\n    });\n}\n\nasync function addFileToVirtualFS(file: File) {\n    const data: ArrayBuffer = await loadFile(file);\n\n    window.Module.FS_createDataFile(\n        \"/virtualfs\",\n        file.name,\n        new Uint8Array(data),\n        true,\n        true\n    );\n}\n\nexport const Emulator: React.FunctionComponent<EmulatorProps> = props => {\n    const [state, dispatch] = useAppState();\n    const [gameName, setGameName] = useState(\"\");\n\n    function togglePause() {\n        if (state.isPaused) {\n            window.Module.resumeMainLoop();\n        } else {\n            window.Module.pauseMainLoop();\n        }\n\n        dispatch(TOGGLE_PAUSE);\n    }\n\n    async function loadBiosFile(e: React.ChangeEvent<HTMLInputElement>) {\n        const file = e.target && e.target.files && e.target.files[0];\n\n        if (!file) {\n            return;\n        }\n\n        await addFileToVirtualFS(file);\n    }\n\n    async function loadROMFile(e: React.ChangeEvent<HTMLInputElement>) {\n        const file = e.target && e.target.files && e.target.files[0];\n\n        if (!file) {\n            return;\n        }\n\n        await addFileToVirtualFS(file);\n        setGameName(file.name.replace(\".zip\", \"\"));\n    }\n\n    function startGame(overrideGameName?: string) {\n        const argv = window.stackAlloc(3 * 4);\n\n        window.HEAP32[argv >> 2] = window.allocateUTF8OnStack(\"gngeo\");\n        window.HEAP32[(argv >> 2) + 1] = window.allocateUTF8OnStack(\n            overrideGameName || gameName\n        );\n        window.HEAP32[(argv >> 2) + 2] = 0;\n\n        dispatch(START_EMULATION);\n        window.Module._run_rom(2, argv);\n    }\n\n    let debugButton = null;\n\n    if (process.env.NODE_ENV !== \"production\") {\n        debugButton = (\n            <button onClick={() => startGame(\"samsho2\")}>samsho2</button>\n        );\n    }\n\n    const classes = classnames(styles.root, props.className);\n\n    return (\n        <div className={classes}>\n            <canvas id=\"canvas\" />\n            <div>\n                BIOS\n                <input type=\"file\" onChange={loadBiosFile} />\n            </div>\n            <div>\n                ROM\n                <input type=\"file\" onChange={loadROMFile} />\n            </div>\n            {debugButton}\n            <button onClick={() => startGame()}>start emulation</button>\n            <button disabled={!state.hasStarted} onClick={togglePause}>\n                {state.isPaused ? \"resume\" : \"pause\"}\n            </button>\n        </div>\n    );\n};\n","// 16 rows, each row has 2 ints (32 bits each)\nconst TILE_SIZE_INTS = 2 * 16;\nconst TILE_SIZE_BYTES = TILE_SIZE_INTS * 4;\n\nconst map: Record<string, number> = {\n    0: 3,\n    1: 2,\n    2: 1,\n    3: 0,\n    4: 7,\n    5: 6,\n    6: 5,\n    7: 4\n};\n\nexport function renderTileToCanvas(\n    canvas: HTMLCanvasElement,\n    tileIndex: number,\n    rgbPalette: Array<[number, number, number, number]>\n) {\n    const cromAddr = window.Module._get_rom_ctile_addr();\n    const tileOffset = TILE_SIZE_BYTES * tileIndex;\n\n    const tileData: number[] = [];\n\n    for (let i = 0; i < TILE_SIZE_BYTES; ++i) {\n        tileData[i] = window.HEAPU8[cromAddr + tileOffset + i];\n    }\n\n    canvas.width = 16;\n    canvas.height = 16;\n\n    const context = canvas.getContext(\"2d\")!;\n\n    const imageData = context.getImageData(0, 0, 16, 16);\n\n    for (let y = 0; y < 16; ++y) {\n        for (let x = 0; x < 8; ++x) {\n            const pixelPair = tileData[y * 8 + map[x]];\n\n            const leftPixelColorIndex = (pixelPair >> 4) & 0xf;\n            const rightPixelColorIndex = pixelPair & 0xf;\n\n            const leftPixel = rgbPalette[leftPixelColorIndex];\n            const rightPixel = rgbPalette[rightPixelColorIndex];\n\n            for (let i = 0; i < leftPixel.length; ++i) {\n                imageData.data[(y * 16 + x * 2) * 4 + i] = leftPixel[i];\n                imageData.data[(y * 16 + x * 2 + 1) * 4 + i] = rightPixel[i];\n            }\n        }\n    }\n\n    context.putImageData(imageData, 0, 0);\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { renderTileToCanvas } from \"../state/renderTileToCanvas\";\nimport {\n    getNeoGeoPalette,\n    convertNeoGeoPaletteToRGB\n} from \"../palette/neoGeoPalette\";\n\nimport styles from \"./tile.module.css\";\n\ninterface TileProps {\n    y: number;\n    tileIndex: number;\n    paletteIndex: number;\n    horizontalFlip?: boolean;\n    verticalFlip?: boolean;\n    positioned: boolean;\n}\n\nexport class Tile extends React.PureComponent<TileProps> {\n    render() {\n        const {\n            y: tileY,\n            tileIndex,\n            paletteIndex,\n            horizontalFlip,\n            verticalFlip,\n            positioned\n        } = this.props;\n\n        function renderCanvas(canvas: HTMLCanvasElement) {\n            const rgbPalette = convertNeoGeoPaletteToRGB(\n                getNeoGeoPalette(paletteIndex)\n            );\n            renderTileToCanvas(canvas, tileIndex, rgbPalette);\n        }\n\n        const horizontalScale = horizontalFlip ? -1 : 1;\n        const verticalScale = verticalFlip ? -1 : 1;\n\n        const inlineStyle = {\n            transform: `scale(${horizontalScale},${verticalScale})`,\n            top: tileY\n        };\n\n        const className = classnames({\n            [styles.positioned]: positioned\n        });\n\n        return (\n            <canvas\n                className={className}\n                ref={r => r && renderCanvas(r)}\n                style={inlineStyle}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { useDrag } from \"react-dnd\";\nimport { Tile } from \"./tile\";\nimport { getSpriteData } from \"../state/spriteData\";\n\nimport styles from \"./sprite.module.css\";\n\ninterface SpriteProps {\n    className?: string;\n    spriteIndex: number;\n    positioned: boolean;\n    overrideX?: number;\n    honorTileSize: boolean;\n}\n\ninterface PreviewProps {\n    connect: any;\n}\n\nexport const Sprite: React.FunctionComponent<SpriteProps> = ({\n    className,\n    spriteIndex,\n    positioned,\n    overrideX,\n    honorTileSize\n}) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dragRef] = useDrag({\n        item: { spriteIndex, type: \"Sprite\" }\n    });\n\n    const spriteData = getSpriteData(spriteIndex, honorTileSize);\n\n    if (spriteData.tiles.length === 0) {\n        return null;\n    }\n\n    const tiles = spriteData.tiles.map((tileData, i) => (\n        <Tile\n            key={i}\n            positioned={positioned}\n            y={tileData.y - spriteData.y}\n            tileIndex={tileData.tileIndex}\n            paletteIndex={tileData.paletteIndex}\n            horizontalFlip={tileData.horizontalFlip}\n            verticalFlip={tileData.verticalFlip}\n        />\n    ));\n\n    const style = {\n        top: spriteData.y,\n        left: typeof overrideX === \"number\" ? overrideX : spriteData.x,\n        gridTemplateRows: `repeat(${spriteData.tiles.length}, 16px)`,\n        zIndex: spriteIndex\n    };\n\n    const spriteClassName = classnames(styles.sprite, className, {\n        [styles.positioned]: positioned\n    });\n\n    return (\n        <div ref={dragRef} className={spriteClassName} style={style}>\n            {tiles}\n        </div>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Sprite } from \"./sprite\";\nimport { isSpriteEmpty } from \"../state/spriteData\";\n\nimport styles from \"./spriteEntry.module.css\";\n\ninterface SpriteEntryProps {\n    className?: string;\n    spriteIndex: number;\n    render?: boolean;\n    hideIfEmpty: boolean;\n    focused?: boolean;\n    honorTileSize: boolean;\n    onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport const SpriteEntry: React.FunctionComponent<SpriteEntryProps> = ({\n    className,\n    spriteIndex,\n    render,\n    hideIfEmpty,\n    focused,\n    honorTileSize,\n    onClick\n}) => {\n    const classes = classnames(styles.root, className, {\n        [styles.hide]: render && hideIfEmpty && isSpriteEmpty(spriteIndex),\n        [styles.focused]: focused\n    });\n\n    return (\n        <div className={classes} onClick={onClick}>\n            <div className={styles.index}>{spriteIndex}</div>\n            <div className={styles.spriteContainer}>\n                {render && (\n                    <Sprite\n                        className={styles.sprite}\n                        spriteIndex={spriteIndex}\n                        positioned={false}\n                        honorTileSize={honorTileSize}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\nimport { SpriteEntry } from \"./spriteEntry\";\nimport { useAppState } from \"../state\";\n\nimport styles from \"./spriteTray.module.css\";\n\nconst TOTAL_SPRITE_COUNT = 381;\n\nfunction arrayFrom(minValue: number, maxValue: number) {\n    const count = maxValue - minValue + 1;\n\n    return new Array(count).fill(0, 0, count).map((_, i) => i + minValue);\n}\n\ninterface SpriteTrayProps {\n    className?: string;\n}\n\nexport const SpriteTray: React.FunctionComponent<SpriteTrayProps> = ({\n    className\n}) => {\n    const [state] = useAppState();\n    const [focusedIndices, setFocusedIndices] = useState<number[]>([]);\n    const [shiftStartIndex, setShiftStartIndex] = useState<null | number>(null);\n\n    const classes = classnames(styles.root, className, {\n        [styles.locked]: !state.isPaused\n    });\n\n    return (\n        <div className={classes}>\n            <div\n                key={state.pauseId}\n                className={styles.spriteEntries}\n                style={{\n                    gridTemplateColumns: `repeat(${TOTAL_SPRITE_COUNT}, max-content)`\n                }}\n            >\n                {new Array(TOTAL_SPRITE_COUNT)\n                    .fill(1, 0, TOTAL_SPRITE_COUNT)\n                    .map((_, i) => (\n                        <SpriteEntry\n                            key={i}\n                            spriteIndex={i}\n                            render={state.isPaused}\n                            hideIfEmpty\n                            onClick={e => {\n                                if (e.ctrlKey) {\n                                    setFocusedIndices(focusedIndices.concat(i));\n                                    setShiftStartIndex(null);\n                                } else if (e.shiftKey) {\n                                    if (\n                                        shiftStartIndex !== null ||\n                                        focusedIndices.length === 1\n                                    ) {\n                                        const minIndex = Math.min(\n                                            shiftStartIndex ||\n                                                focusedIndices[0],\n                                            i\n                                        );\n                                        const maxIndex = Math.max(\n                                            shiftStartIndex ||\n                                                focusedIndices[0],\n                                            i\n                                        );\n                                        setFocusedIndices(\n                                            arrayFrom(minIndex, maxIndex)\n                                        );\n                                    } else {\n                                        setFocusedIndices([i]);\n                                        setShiftStartIndex(i);\n                                    }\n                                } else {\n                                    setFocusedIndices([i]);\n                                    setShiftStartIndex(null);\n                                }\n                            }}\n                            focused={focusedIndices.indexOf(i) > -1}\n                            honorTileSize\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { renderTileToCanvas } from \"../state/renderTileToCanvas\";\n\nimport styles from \"./extractedTile.module.css\";\n\ninterface ExtractedTileProps {\n    y: number;\n    tileIndex: number;\n    rgbPalette: Array<[number, number, number, number]>;\n    horizontalFlip?: boolean;\n    verticalFlip?: boolean;\n}\n\nexport class ExtractedTile extends React.PureComponent<ExtractedTileProps> {\n    render() {\n        const {\n            y: tileY,\n            tileIndex,\n            rgbPalette,\n            horizontalFlip,\n            verticalFlip\n        } = this.props;\n\n        function renderCanvas(canvas: HTMLCanvasElement) {\n            renderTileToCanvas(canvas, tileIndex, rgbPalette);\n        }\n\n        const horizontalScale = horizontalFlip ? -1 : 1;\n        const verticalScale = verticalFlip ? -1 : 1;\n\n        const inlineStyle = {\n            transform: `scale(${horizontalScale},${verticalScale})`,\n            top: tileY\n        };\n\n        return (\n            <canvas\n                className={styles.root}\n                ref={r => r && renderCanvas(r)}\n                style={inlineStyle}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { ExtractedSprite as ExtractedSpriteData } from \"../state/types\";\nimport { ExtractedTile } from \"./extractedTile\";\n\nimport styles from \"./extractedSprite.module.css\";\n\ninterface ExtractedSpriteProps {\n    data: ExtractedSpriteData;\n    autoAnimate?: boolean;\n    animationCounter?: number;\n}\n\nexport const ExtractedSprite: React.FunctionComponent<ExtractedSpriteProps> = ({\n    data,\n    autoAnimate,\n    animationCounter\n}) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dragRef] = useDrag({\n        item: {\n            spriteIndex: data.spriteMemoryIndex,\n            pauseId: data.group.pauseId,\n            type: \"Sprite\"\n        }\n    });\n\n    const tiles = data.tiles.map((tileData, i) => {\n        let tileIndex = tileData.tileIndex;\n\n        if (autoAnimate && typeof animationCounter === \"number\") {\n            if (tileData.autoAnimation === 3) {\n                // 3 bit auto animation: the 4th bit is set, indicating this tile does 3bit auto animation\n                // that means take its tileIndex, and replace its bottom three bits with those of the animation counter\n                tileIndex =\n                    (tileIndex & ~7) + ((tileIndex + animationCounter) & 7);\n            }\n            if (tileData.autoAnimation === 2) {\n                // 2 bit auto animation: like above but replace its bottom two bits\n                tileIndex =\n                    (tileIndex & ~3) + ((tileIndex + animationCounter) & 3);\n            }\n        }\n\n        return (\n            <ExtractedTile\n                key={i}\n                y={tileData.composedY - data.composedY}\n                tileIndex={tileIndex}\n                rgbPalette={tileData.rgbPalette}\n                horizontalFlip={tileData.horizontalFlip}\n                verticalFlip={tileData.verticalFlip}\n            />\n        );\n    });\n\n    const style = {\n        top: data.composedY,\n        left: data.composedX,\n        gridTemplateRows: `repeat(${data.tiles.length}, 16px)`,\n        zIndex: data.spriteMemoryIndex\n    };\n\n    return (\n        <div ref={dragRef} className={styles.root} style={style}>\n            {tiles}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport classnames from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport { ExtractedSprite as ExtractedSpriteCmp } from \"./extractedSprite\";\nimport {\n    getBackdropNeoGeoColor,\n    neoGeoColorToCSS\n} from \"../palette/neoGeoPalette\";\nimport { useAppState, extractSpriteAction } from \"../state\";\nimport { ExtractedSprite } from \"../state/types\";\n\nimport styles from \"./composeScreen.module.css\";\n\ninterface ComposeScreenProps {\n    className?: string;\n}\n\nexport const ComposeScreen: React.FunctionComponent<ComposeScreenProps> = ({\n    className\n}) => {\n    const [animationCounter, setAnimationCounter] = useState({\n        animation: 0,\n        rafFrameCountdown: 0\n    });\n    const [runPreview, setRunPreview] = useState(false);\n    const [state, dispatch] = useAppState();\n    const [divRef, setDivRef] = useState<null | HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (runPreview) {\n            // minus one because on my machine the animation can't quite keep up\n            const frameCountdown =\n                window.Module._get_neogeo_frame_counter_speed() - 1;\n            requestAnimationFrame(() => {\n                const diff = animationCounter.rafFrameCountdown === 0 ? 1 : 0;\n\n                setAnimationCounter({\n                    animation: animationCounter.animation + diff,\n                    rafFrameCountdown:\n                        diff === 1\n                            ? frameCountdown\n                            : animationCounter.rafFrameCountdown - 1\n                });\n            });\n        }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, dropRef] = useDrop({\n        accept: \"Sprite\",\n        drop: (item: any, monitor: any) => {\n            if (divRef) {\n                const x =\n                    monitor.getClientOffset().x -\n                    divRef.getBoundingClientRect().left;\n\n                const composedX = Math.floor(x / 16) * 16;\n                const spriteIndex = item.spriteIndex;\n                const pauseId = item.pauseId;\n\n                dispatch(extractSpriteAction(spriteIndex, composedX, pauseId));\n            }\n        }\n    });\n\n    const extractedSprites = state.extractedSpriteGroups.reduce<\n        ExtractedSprite[]\n    >((b, esg) => {\n        return b.concat(esg.sprites);\n    }, []);\n\n    const sprites = extractedSprites.map(extractedSprite => (\n        <ExtractedSpriteCmp\n            key={extractedSprite.spriteMemoryIndex}\n            data={extractedSprite}\n            autoAnimate={runPreview}\n            animationCounter={animationCounter.animation}\n        />\n    ));\n\n    const backgroundColor = state.isPaused\n        ? neoGeoColorToCSS(getBackdropNeoGeoColor())\n        : \"transparent\";\n\n    const maxX = Math.max(0, ...extractedSprites.map(es => es.composedX));\n\n    const style = {\n        backgroundColor,\n        width: Math.max(maxX + 48, 320)\n    };\n\n    const finalClassName = classnames(styles.root, className);\n\n    return (\n        <div>\n            <button onClick={() => setRunPreview(!runPreview)}>\n                {runPreview ? \"stop\" : \"preview\"}\n            </button>\n            <div>\n                {animationCounter.animation} (\n                {animationCounter.rafFrameCountdown})\n            </div>\n            <div\n                className={finalClassName}\n                ref={div => {\n                    setDivRef(div);\n                    dropRef(div);\n                }}\n                style={style}\n            >\n                {sprites}\n            </div>\n        </div>\n    );\n};\n","/**\n * This class handles LZW encoding\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport const LZWEncoder = function() {\n    var exports = {};\n    var EOF = -1;\n    var imgW;\n    var imgH;\n    var pixAry;\n    var initCodeSize;\n    var remaining;\n    var curPixel;\n\n    // GIFCOMPR.C - GIF Image compression routines\n    // Lempel-Ziv compression based on 'compress'. GIF modifications by\n    // David Rowley (mgardi@watdcsu.waterloo.edu)\n    // General DEFINEs\n\n    var BITS = 12;\n    var HSIZE = 5003; // 80% occupancy\n\n    // GIF Image compression - modified 'compress'\n    // Based on: compress.c - File compression ala IEEE Computer, June 1984.\n    // By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n    // Jim McKie (decvax!mcvax!jim)\n    // Steve Davies (decvax!vax135!petsd!peora!srd)\n    // Ken Turkowski (decvax!decwrl!turtlevax!ken)\n    // James A. Woods (decvax!ihnp4!ames!jaw)\n    // Joe Orost (decvax!vax135!petsd!joe)\n\n    var n_bits; // number of bits/code\n    var maxbits = BITS; // user settable max # bits/code\n    var maxcode; // maximum code, given n_bits\n    var maxmaxcode = 1 << BITS; // should NEVER generate this code\n    var htab = [];\n    var codetab = [];\n    var hsize = HSIZE; // for dynamic table sizing\n    var free_ent = 0; // first unused entry\n\n    // block compression parameters -- after all codes are used up,\n    // and compression rate changes, start over.\n\n    var clear_flg = false;\n\n    // Algorithm: use open addressing double hashing (no chaining) on the\n    // prefix code / next character combination. We do a variant of Knuth's\n    // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n    // secondary probe. Here, the modular division first probe is gives way\n    // to a faster exclusive-or manipulation. Also do block compression with\n    // an adaptive reset, whereby the code table is cleared when the compression\n    // ratio decreases, but after the table fills. The variable-length output\n    // codes are re-sized at this point, and a special CLEAR code is generated\n    // for the decompressor. Late addition: construct the table according to\n    // file size for noticeable speed improvement on small files. Please direct\n    // questions about this implementation to ames!jaw.\n\n    var g_init_bits;\n    var ClearCode;\n    var EOFCode;\n\n    // output\n    // Output the given code.\n    // Inputs:\n    // code: A n_bits-bit integer. If == -1, then EOF. This assumes\n    // that n_bits =< wordsize - 1.\n    // Outputs:\n    // Outputs code to the file.\n    // Assumptions:\n    // Chars are 8 bits long.\n    // Algorithm:\n    // Maintain a BITS character long buffer (so that 8 codes will\n    // fit in it exactly). Use the VAX insv instruction to insert each\n    // code in turn. When the buffer fills up empty it and start over.\n\n    var cur_accum = 0;\n    var cur_bits = 0;\n    var masks = [\n        0x0000,\n        0x0001,\n        0x0003,\n        0x0007,\n        0x000f,\n        0x001f,\n        0x003f,\n        0x007f,\n        0x00ff,\n        0x01ff,\n        0x03ff,\n        0x07ff,\n        0x0fff,\n        0x1fff,\n        0x3fff,\n        0x7fff,\n        0xffff\n    ];\n\n    // Number of characters so far in this 'packet'\n    var a_count;\n\n    // Define the storage for the packet accumulator\n    var accum = [];\n\n    var LZWEncoder = (exports.LZWEncoder = function LZWEncoder(\n        width,\n        height,\n        pixels,\n        color_depth\n    ) {\n        imgW = width;\n        imgH = height;\n        pixAry = pixels;\n        initCodeSize = Math.max(2, color_depth);\n    });\n\n    // Add a character to the end of the current packet, and if it is 254\n    // characters, flush the packet to disk.\n    var char_out = function char_out(c, outs) {\n        accum[a_count++] = c;\n        if (a_count >= 254) flush_char(outs);\n    };\n\n    // Clear out the hash table\n    // table clear for block compress\n\n    var cl_block = function cl_block(outs) {\n        cl_hash(hsize);\n        free_ent = ClearCode + 2;\n        clear_flg = true;\n        output(ClearCode, outs);\n    };\n\n    // reset code table\n    var cl_hash = function cl_hash(hsize) {\n        for (var i = 0; i < hsize; ++i) htab[i] = -1;\n    };\n\n    var compress = (exports.compress = function compress(init_bits, outs) {\n        var fcode;\n        var i; /* = 0 */\n        var c;\n        var ent;\n        var disp;\n        var hsize_reg;\n        var hshift;\n\n        // Set up the globals: g_init_bits - initial number of bits\n        g_init_bits = init_bits;\n\n        // Set up the necessary values\n        clear_flg = false;\n        n_bits = g_init_bits;\n        maxcode = MAXCODE(n_bits);\n\n        ClearCode = 1 << (init_bits - 1);\n        EOFCode = ClearCode + 1;\n        free_ent = ClearCode + 2;\n\n        a_count = 0; // clear packet\n\n        ent = nextPixel();\n\n        hshift = 0;\n        for (fcode = hsize; fcode < 65536; fcode *= 2) ++hshift;\n        hshift = 8 - hshift; // set hash code range bound\n\n        hsize_reg = hsize;\n        cl_hash(hsize_reg); // clear hash table\n\n        output(ClearCode, outs);\n\n        outer_loop: while ((c = nextPixel()) != EOF) {\n            fcode = (c << maxbits) + ent;\n            i = (c << hshift) ^ ent; // xor hashing\n\n            if (htab[i] == fcode) {\n                ent = codetab[i];\n                continue;\n            } else if (htab[i] >= 0) {\n                // non-empty slot\n\n                disp = hsize_reg - i; // secondary hash (after G. Knott)\n                if (i === 0) disp = 1;\n\n                do {\n                    if ((i -= disp) < 0) i += hsize_reg;\n\n                    if (htab[i] == fcode) {\n                        ent = codetab[i];\n                        continue outer_loop;\n                    }\n                } while (htab[i] >= 0);\n            }\n\n            output(ent, outs);\n            ent = c;\n            if (free_ent < maxmaxcode) {\n                codetab[i] = free_ent++; // code -> hashtable\n                htab[i] = fcode;\n            } else cl_block(outs);\n        }\n\n        // Put out the final code.\n        output(ent, outs);\n        output(EOFCode, outs);\n    });\n\n    // ----------------------------------------------------------------------------\n    var encode = (exports.encode = function encode(os) {\n        os.writeByte(initCodeSize); // write \"initial code size\" byte\n        remaining = imgW * imgH; // reset navigation variables\n        curPixel = 0;\n        compress(initCodeSize + 1, os); // compress and write the pixel data\n        os.writeByte(0); // write block terminator\n    });\n\n    // Flush the packet to disk, and reset the accumulator\n    var flush_char = function flush_char(outs) {\n        if (a_count > 0) {\n            outs.writeByte(a_count);\n            outs.writeBytes(accum, 0, a_count);\n            a_count = 0;\n        }\n    };\n\n    var MAXCODE = function MAXCODE(n_bits) {\n        return (1 << n_bits) - 1;\n    };\n\n    // ----------------------------------------------------------------------------\n    // Return the next pixel from the image\n    // ----------------------------------------------------------------------------\n\n    var nextPixel = function nextPixel() {\n        if (remaining === 0) return EOF;\n        --remaining;\n        var pix = pixAry[curPixel++];\n        return pix & 0xff;\n    };\n\n    var output = function output(code, outs) {\n        cur_accum &= masks[cur_bits];\n\n        if (cur_bits > 0) cur_accum |= code << cur_bits;\n        else cur_accum = code;\n\n        cur_bits += n_bits;\n\n        while (cur_bits >= 8) {\n            char_out(cur_accum & 0xff, outs);\n            cur_accum >>= 8;\n            cur_bits -= 8;\n        }\n\n        // If the next entry is going to be too big for the code size,\n        // then increase it, if possible.\n\n        if (free_ent > maxcode || clear_flg) {\n            if (clear_flg) {\n                maxcode = MAXCODE((n_bits = g_init_bits));\n                clear_flg = false;\n            } else {\n                ++n_bits;\n                if (n_bits == maxbits) maxcode = maxmaxcode;\n                else maxcode = MAXCODE(n_bits);\n            }\n        }\n\n        if (code == EOFCode) {\n            // At EOF, write the rest of the buffer.\n            while (cur_bits > 0) {\n                char_out(cur_accum & 0xff, outs);\n                cur_accum >>= 8;\n                cur_bits -= 8;\n            }\n\n            flush_char(outs);\n        }\n    };\n\n    LZWEncoder.apply(this, arguments);\n    return exports;\n};\n","/*\n * NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n\n/*\n * This class handles Neural-Net quantization algorithm\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nexport const NeuQuant = function() {\n    var exports = {};\n    var netsize = 256; /* number of colours used */\n\n    /* four primes near 500 - assume no image has a length so large */\n    /* that it is divisible by all four primes */\n\n    var prime1 = 499;\n    var prime2 = 491;\n    var prime3 = 487;\n    var prime4 = 503;\n    var minpicturebytes = 3 * prime4; /* minimum size for input image */\n\n    /*\n     * Program Skeleton ---------------- [select samplefac in range 1..30] [read\n     * image from input file] pic = (unsigned char*) malloc(3*width*height);\n     * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\n     * image header, using writecolourmap(f)] inxbuild(); write output image using\n     * inxsearch(b,g,r)\n     */\n\n    /*\n     * Network Definitions -------------------\n     */\n\n    var maxnetpos = netsize - 1;\n    var netbiasshift = 4; /* bias for colour values */\n    var ncycles = 100; /* no. of learning cycles */\n\n    /* defs for freq and bias */\n    var intbiasshift = 16; /* bias for fractions */\n    var intbias = 1 << intbiasshift;\n    var gammashift = 10; /* gamma = 1024 */\n    var gamma = 1 << gammashift;\n    var betashift = 10;\n    var beta = intbias >> betashift; /* beta = 1/1024 */\n    var betagamma = intbias << (gammashift - betashift);\n\n    /* defs for decreasing radius factor */\n    var initrad = netsize >> 3; /* for 256 cols, radius starts */\n    var radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\n    var radiusbias = 1 << radiusbiasshift;\n    var initradius = initrad * radiusbias; /* and decreases by a */\n    var radiusdec = 30; /* factor of 1/30 each cycle */\n\n    /* defs for decreasing alpha factor */\n    var alphabiasshift = 10; /* alpha starts at 1.0 */\n    var initalpha = 1 << alphabiasshift;\n    var alphadec; /* biased by 10 bits */\n\n    /* radbias and alpharadbias used for radpower calculation */\n    var radbiasshift = 8;\n    var radbias = 1 << radbiasshift;\n    var alpharadbshift = alphabiasshift + radbiasshift;\n    var alpharadbias = 1 << alpharadbshift;\n\n    /*\n     * Types and Global Variables --------------------------\n     */\n\n    var thepicture; /* the input image itself */\n    var lengthcount; /* lengthcount = H*W*3 */\n    var samplefac; /* sampling factor 1..30 */\n\n    // typedef int pixel[4]; /* BGRc */\n    var network; /* the network itself - [netsize][4] */\n    var netindex = [];\n\n    /* for network lookup - really 256 */\n    var bias = [];\n\n    /* bias and freq arrays for learning */\n    var freq = [];\n    var radpower = [];\n\n    var NeuQuant = (exports.NeuQuant = function NeuQuant(thepic, len, sample) {\n        var i;\n        var p;\n\n        thepicture = thepic;\n        lengthcount = len;\n        samplefac = sample;\n\n        network = new Array(netsize);\n\n        for (i = 0; i < netsize; i++) {\n            network[i] = new Array(4);\n            p = network[i];\n            p[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\n            freq[i] = intbias / netsize; /* 1/netsize */\n            bias[i] = 0;\n        }\n    });\n\n    var colorMap = function colorMap() {\n        var map = [];\n        var index = new Array(netsize);\n\n        for (var i = 0; i < netsize; i++) index[network[i][3]] = i;\n\n        var k = 0;\n        for (var l = 0; l < netsize; l++) {\n            var j = index[l];\n            map[k++] = network[j][0];\n            map[k++] = network[j][1];\n            map[k++] = network[j][2];\n        }\n\n        return map;\n    };\n\n    /*\n     * Insertion sort of network and building of netindex[0..255] (to do after\n     * unbias)\n     * -------------------------------------------------------------------------------\n     */\n\n    var inxbuild = function inxbuild() {\n        var i;\n        var j;\n        var smallpos;\n        var smallval;\n        var p;\n        var q;\n        var previouscol;\n        var startpos;\n\n        previouscol = 0;\n        startpos = 0;\n        for (i = 0; i < netsize; i++) {\n            p = network[i];\n            smallpos = i;\n            smallval = p[1]; /* index on g */\n\n            /* find smallest in i..netsize-1 */\n            for (j = i + 1; j < netsize; j++) {\n                q = network[j];\n                if (q[1] < smallval) {\n                    /* index on g */\n                    smallpos = j;\n                    smallval = q[1]; /* index on g */\n                }\n            }\n            q = network[smallpos];\n\n            /* swap p (i) and q (smallpos) entries */\n            if (i != smallpos) {\n                j = q[0];\n                q[0] = p[0];\n                p[0] = j;\n                j = q[1];\n                q[1] = p[1];\n                p[1] = j;\n                j = q[2];\n                q[2] = p[2];\n                p[2] = j;\n                j = q[3];\n                q[3] = p[3];\n                p[3] = j;\n            }\n\n            /* smallval entry is now in position i */\n\n            if (smallval != previouscol) {\n                netindex[previouscol] = (startpos + i) >> 1;\n\n                for (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\n\n                previouscol = smallval;\n                startpos = i;\n            }\n        }\n\n        netindex[previouscol] = (startpos + maxnetpos) >> 1;\n        for (j = previouscol + 1; j < 256; j++)\n            netindex[j] = maxnetpos; /* really 256 */\n    };\n\n    /*\n     * Main Learning Loop ------------------\n     */\n\n    var learn = function learn() {\n        var i;\n        var j;\n        var b;\n        var g;\n        var r;\n        var radius;\n        var rad;\n        var alpha;\n        var step;\n        var delta;\n        var samplepixels;\n        var p;\n        var pix;\n        var lim;\n\n        if (lengthcount < minpicturebytes) samplefac = 1;\n\n        alphadec = 30 + (samplefac - 1) / 3;\n        p = thepicture;\n        pix = 0;\n        lim = lengthcount;\n        samplepixels = lengthcount / (3 * samplefac);\n        delta = (samplepixels / ncycles) | 0;\n        alpha = initalpha;\n        radius = initradius;\n\n        rad = radius >> radiusbiasshift;\n        if (rad <= 1) rad = 0;\n\n        for (i = 0; i < rad; i++)\n            radpower[i] =\n                alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\n\n        if (lengthcount < minpicturebytes) step = 3;\n        else if (lengthcount % prime1 !== 0) step = 3 * prime1;\n        else {\n            if (lengthcount % prime2 !== 0) step = 3 * prime2;\n            else {\n                if (lengthcount % prime3 !== 0) step = 3 * prime3;\n                else step = 3 * prime4;\n            }\n        }\n\n        i = 0;\n        while (i < samplepixels) {\n            b = (p[pix + 0] & 0xff) << netbiasshift;\n            g = (p[pix + 1] & 0xff) << netbiasshift;\n            r = (p[pix + 2] & 0xff) << netbiasshift;\n            j = contest(b, g, r);\n\n            altersingle(alpha, j, b, g, r);\n            if (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\n\n            pix += step;\n            if (pix >= lim) pix -= lengthcount;\n\n            i++;\n\n            if (delta === 0) delta = 1;\n\n            if (i % delta === 0) {\n                alpha -= alpha / alphadec;\n                radius -= radius / radiusdec;\n                rad = radius >> radiusbiasshift;\n\n                if (rad <= 1) rad = 0;\n\n                for (j = 0; j < rad; j++)\n                    radpower[j] =\n                        alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\n            }\n        }\n    };\n\n    /*\n     ** Search for BGR values 0..255 (after net is unbiased) and return colour\n     * index\n     * ----------------------------------------------------------------------------\n     */\n\n    var map = (exports.map = function map(b, g, r) {\n        var i;\n        var j;\n        var dist;\n        var a;\n        var bestd;\n        var p;\n        var best;\n\n        bestd = 1000; /* biggest possible dist is 256*3 */\n        best = -1;\n        i = netindex[g]; /* index on g */\n        j = i - 1; /* start at netindex[g] and work outwards */\n\n        while (i < netsize || j >= 0) {\n            if (i < netsize) {\n                p = network[i];\n                dist = p[1] - g; /* inx key */\n\n                if (dist >= bestd) i = netsize;\n                /* stop iter */ else {\n                    i++;\n                    if (dist < 0) dist = -dist;\n                    a = p[0] - b;\n                    if (a < 0) a = -a;\n                    dist += a;\n\n                    if (dist < bestd) {\n                        a = p[2] - r;\n                        if (a < 0) a = -a;\n                        dist += a;\n\n                        if (dist < bestd) {\n                            bestd = dist;\n                            best = p[3];\n                        }\n                    }\n                }\n            }\n\n            if (j >= 0) {\n                p = network[j];\n                dist = g - p[1]; /* inx key - reverse dif */\n\n                if (dist >= bestd) j = -1;\n                /* stop iter */ else {\n                    j--;\n                    if (dist < 0) dist = -dist;\n                    a = p[0] - b;\n                    if (a < 0) a = -a;\n                    dist += a;\n\n                    if (dist < bestd) {\n                        a = p[2] - r;\n                        if (a < 0) a = -a;\n                        dist += a;\n                        if (dist < bestd) {\n                            bestd = dist;\n                            best = p[3];\n                        }\n                    }\n                }\n            }\n        }\n\n        return best;\n    });\n\n    var process = (exports.process = function process() {\n        learn();\n        unbiasnet();\n        inxbuild();\n        return colorMap();\n    });\n\n    /*\n     * Unbias network to give byte values 0..255 and record position i to prepare\n     * for sort\n     * -----------------------------------------------------------------------------------\n     */\n\n    var unbiasnet = function unbiasnet() {\n        var i;\n        var j;\n\n        for (i = 0; i < netsize; i++) {\n            network[i][0] >>= netbiasshift;\n            network[i][1] >>= netbiasshift;\n            network[i][2] >>= netbiasshift;\n            network[i][3] = i; /* record colour no */\n        }\n    };\n\n    /*\n     * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\n     * radpower[|i-j|]\n     * ---------------------------------------------------------------------------------\n     */\n\n    var alterneigh = function alterneigh(rad, i, b, g, r) {\n        var j;\n        var k;\n        var lo;\n        var hi;\n        var a;\n        var m;\n        var p;\n\n        lo = i - rad;\n        if (lo < -1) lo = -1;\n\n        hi = i + rad;\n        if (hi > netsize) hi = netsize;\n\n        j = i + 1;\n        k = i - 1;\n        m = 1;\n\n        while (j < hi || k > lo) {\n            a = radpower[m++];\n\n            if (j < hi) {\n                p = network[j++];\n\n                try {\n                    p[0] -= (a * (p[0] - b)) / alpharadbias;\n                    p[1] -= (a * (p[1] - g)) / alpharadbias;\n                    p[2] -= (a * (p[2] - r)) / alpharadbias;\n                } catch (e) {} // prevents 1.3 miscompilation\n            }\n\n            if (k > lo) {\n                p = network[k--];\n\n                try {\n                    p[0] -= (a * (p[0] - b)) / alpharadbias;\n                    p[1] -= (a * (p[1] - g)) / alpharadbias;\n                    p[2] -= (a * (p[2] - r)) / alpharadbias;\n                } catch (e) {}\n            }\n        }\n    };\n\n    /*\n     * Move neuron i towards biased (b,g,r) by factor alpha\n     * ----------------------------------------------------\n     */\n\n    var altersingle = function altersingle(alpha, i, b, g, r) {\n        /* alter hit neuron */\n        var n = network[i];\n        n[0] -= (alpha * (n[0] - b)) / initalpha;\n        n[1] -= (alpha * (n[1] - g)) / initalpha;\n        n[2] -= (alpha * (n[2] - r)) / initalpha;\n    };\n\n    /*\n     * Search for biased BGR values ----------------------------\n     */\n\n    var contest = function contest(b, g, r) {\n        /* finds closest neuron (min dist) and updates freq */\n        /* finds best neuron (min dist-bias) and returns position */\n        /* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\n        /* bias[i] = gamma*((1/netsize)-freq[i]) */\n\n        var i;\n        var dist;\n        var a;\n        var biasdist;\n        var betafreq;\n        var bestpos;\n        var bestbiaspos;\n        var bestd;\n        var bestbiasd;\n        var n;\n\n        bestd = ~(1 << 31);\n        bestbiasd = bestd;\n        bestpos = -1;\n        bestbiaspos = bestpos;\n\n        for (i = 0; i < netsize; i++) {\n            n = network[i];\n            dist = n[0] - b;\n            if (dist < 0) dist = -dist;\n            a = n[1] - g;\n            if (a < 0) a = -a;\n            dist += a;\n            a = n[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n\n            if (dist < bestd) {\n                bestd = dist;\n                bestpos = i;\n            }\n\n            biasdist = dist - (bias[i] >> (intbiasshift - netbiasshift));\n\n            if (biasdist < bestbiasd) {\n                bestbiasd = biasdist;\n                bestbiaspos = i;\n            }\n\n            betafreq = freq[i] >> betashift;\n            freq[i] -= betafreq;\n            bias[i] += betafreq << gammashift;\n        }\n\n        freq[bestpos] += beta;\n        bias[bestpos] -= betagamma;\n        return bestbiaspos;\n    };\n\n    NeuQuant.apply(this, arguments);\n    return exports;\n};\n","/**\n * This class lets you encode animated GIF files\n * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @version 0.1 AS3 implementation\n */\n\nimport { LZWEncoder } from \"./LZWEncoder\";\nimport { NeuQuant } from \"./NeuQuant\";\n\nexport const GIFEncoder = function() {\n    for (var i = 0, chr = {}; i < 256; i++) chr[i] = String.fromCharCode(i);\n\n    function ByteArray() {\n        this.bin = [];\n    }\n\n    ByteArray.prototype.getData = function() {\n        for (var v = \"\", l = this.bin.length, i = 0; i < l; i++)\n            v += chr[this.bin[i]];\n        return v;\n    };\n\n    ByteArray.prototype.writeByte = function(val) {\n        this.bin.push(val);\n    };\n\n    ByteArray.prototype.writeUTFBytes = function(string) {\n        for (var l = string.length, i = 0; i < l; i++)\n            this.writeByte(string.charCodeAt(i));\n    };\n\n    ByteArray.prototype.writeBytes = function(array, offset, length) {\n        for (var l = length || array.length, i = offset || 0; i < l; i++)\n            this.writeByte(array[i]);\n    };\n\n    var exports = {};\n    var width; // image size\n    var height;\n    var transparent = null; // transparent color if given\n    var transIndex; // transparent index in color table\n    var repeat = -1; // no repeat\n    var delay = 0; // frame delay (hundredths)\n    var started = false; // ready to output frames\n    var out;\n    var image; // current frame\n    var pixels; // BGR byte array from frame\n    var indexedPixels; // converted frame indexed to palette\n    var colorDepth; // number of bit planes\n    var colorTab; // RGB palette\n    var usedEntry = []; // active palette entries\n    var palSize = 7; // color table size (bits-1)\n    var dispose = -1; // disposal code (-1 = use default)\n    var closeStream = false; // close stream when finished\n    var firstFrame = true;\n    var sizeSet = false; // if false, get size from first frame\n    var sample = 10; // default sample interval for quantizer\n    var comment = \"Generated by jsgif (https://github.com/antimatter15/jsgif/)\"; // default comment for generated gif\n\n    /**\n     * Sets the delay time between each frame, or changes it for subsequent frames\n     * (applies to last frame added)\n     * int delay time in milliseconds\n     * @param ms\n     */\n\n    var setDelay = (exports.setDelay = function setDelay(ms) {\n        delay = Math.round(ms / 10);\n    });\n\n    /**\n     * Sets the GIF frame disposal code for the last added frame and any\n     *\n     * subsequent frames. Default is 0 if no transparent color has been set,\n     * otherwise 2.\n     * @param code\n     * int disposal code.\n     */\n\n    var setDispose = (exports.setDispose = function setDispose(code) {\n        if (code >= 0) dispose = code;\n    });\n\n    /**\n     * Sets the number of times the set of GIF frames should be played. Default is\n     * 1; 0 means play indefinitely. Must be invoked before the first image is\n     * added.\n     *\n     * @param iter\n     * int number of iterations.\n     * @return\n     */\n\n    var setRepeat = (exports.setRepeat = function setRepeat(iter) {\n        if (iter >= 0) repeat = iter;\n    });\n\n    /**\n     * Sets the transparent color for the last added frame and any subsequent\n     * frames. Since all colors are subject to modification in the quantization\n     * process, the color in the final palette for each frame closest to the given\n     * color becomes the transparent color for that frame. May be set to null to\n     * indicate no transparent color.\n     * @param\n     * Color to be treated as transparent on display.\n     */\n\n    var setTransparent = (exports.setTransparent = function setTransparent(c) {\n        transparent = c;\n    });\n\n    /**\n     * Sets the comment for the block comment\n     * @param\n     * string to be insterted as comment\n     */\n\n    var setComment = (exports.setComment = function setComment(c) {\n        comment = c;\n    });\n\n    /**\n     * The addFrame method takes an incoming BitmapData object to create each frames\n     * @param\n     * BitmapData object to be treated as a GIF's frame\n     */\n\n    var addFrame = (exports.addFrame = function addFrame(im, is_imageData) {\n        if (im === null || !started || out === null) {\n            throw new Error(\"Please call start method before calling addFrame\");\n        }\n\n        var ok = true;\n\n        try {\n            if (!is_imageData) {\n                image = im.getImageData(0, 0, im.canvas.width, im.canvas.height)\n                    .data;\n                if (!sizeSet) setSize(im.canvas.width, im.canvas.height);\n            } else {\n                if (im instanceof ImageData) {\n                    image = im.data;\n                    if (!sizeSet || width != im.width || height != im.height) {\n                        setSize(im.width, im.height);\n                    } else {\n                    }\n                } else if (im instanceof Uint8ClampedArray) {\n                    if (im.length == width * height * 4) {\n                        image = im;\n                    } else {\n                        console.log(\n                            \"Please set the correct size: ImageData length mismatch\"\n                        );\n                        ok = false;\n                    }\n                } else {\n                    console.log(\"Please provide correct input\");\n                    ok = false;\n                }\n            }\n            getImagePixels(); // convert to correct format if necessary\n            analyzePixels(); // build color table & map pixels\n\n            if (firstFrame) {\n                writeLSD(); // logical screen descriptior\n                writePalette(); // global color table\n                if (repeat >= 0) {\n                    // use NS app extension to indicate reps\n                    writeNetscapeExt();\n                }\n            }\n\n            writeGraphicCtrlExt(); // write graphic control extension\n            if (comment !== \"\") {\n                writeCommentExt(); // write comment extension\n            }\n            writeImageDesc(); // image descriptor\n            if (!firstFrame) writePalette(); // local color table\n            writePixels(); // encode and write pixel data\n            firstFrame = false;\n        } catch (e) {\n            ok = false;\n        }\n\n        return ok;\n    });\n\n    /**\n     * @description: Downloads the encoded gif with the given name\n     * No need of any conversion from the stream data (out) to base64\n     * Solves the issue of large file sizes when there are more frames\n     * and does not involve in creation of any temporary data in the process\n     * so no wastage of memory, and speeds up the process of downloading\n     * to just calling this function.\n     * @parameter {String} filename filename used for downloading the gif\n     */\n\n    var download = (exports.download = function download(filename) {\n        if (out === null || closeStream == false) {\n            console.log(\n                \"Please call start method and add frames and call finish method before calling download\"\n            );\n        } else {\n            filename =\n                filename !== undefined\n                    ? filename.endsWith(\".gif\")\n                        ? filename\n                        : filename + \".gif\"\n                    : \"download.gif\";\n            var templink = document.createElement(\"a\");\n            templink.download = filename;\n            templink.href = URL.createObjectURL(\n                new Blob([new Uint8Array(out.bin)], { type: \"image/gif\" })\n            );\n            templink.click();\n        }\n    });\n\n    /**\n     * Adds final trailer to the GIF stream, if you don't call the finish method\n     * the GIF stream will not be valid.\n     */\n\n    var finish = (exports.finish = function finish() {\n        if (!started) return false;\n\n        var ok = true;\n        started = false;\n\n        try {\n            out.writeByte(0x3b); // gif trailer\n            closeStream = true;\n        } catch (e) {\n            ok = false;\n        }\n\n        return ok;\n    });\n\n    /**\n     * Resets some members so that a new stream can be started.\n     * This method is actually called by the start method\n     */\n\n    var reset = function reset() {\n        // reset for subsequent use\n        transIndex = 0;\n        image = null;\n        pixels = null;\n        indexedPixels = null;\n        colorTab = null;\n        closeStream = false;\n        firstFrame = true;\n    };\n\n    /**\n     * * Sets frame rate in frames per second. Equivalent to\n     * <code>setDelay(1000/fps)</code>.\n     * @param fps\n     * float frame rate (frames per second)\n     */\n\n    var setFrameRate = (exports.setFrameRate = function setFrameRate(fps) {\n        if (fps != 0xf) delay = Math.round(100 / fps);\n    });\n\n    /**\n     * Sets quality of color quantization (conversion of images to the maximum 256\n     * colors allowed by the GIF specification). Lower values (minimum = 1)\n     * produce better colors, but slow processing significantly. 10 is the\n     * default, and produces good color mapping at reasonable speeds. Values\n     * greater than 20 do not yield significant improvements in speed.\n     * @param quality\n     * int greater than 0.\n     * @return\n     */\n\n    var setQuality = (exports.setQuality = function setQuality(quality) {\n        if (quality < 1) quality = 1;\n        sample = quality;\n    });\n\n    /**\n     * Sets the GIF frame size. The default size is the size of the first frame\n     * added if this method is not invoked.\n     * @param w\n     * int frame width.\n     * @param h\n     * int frame width.\n     */\n\n    var setSize = (exports.setSize = function setSize(w, h) {\n        if (started && !firstFrame) return;\n        width = w;\n        height = h;\n        if (width < 1) width = 320;\n        if (height < 1) height = 240;\n        sizeSet = true;\n    });\n\n    /**\n     * Initiates GIF file creation on the given stream.\n     * @param os\n     * OutputStream on which GIF images are written.\n     * @return false if initial write failed.\n     */\n\n    var start = (exports.start = function start() {\n        reset();\n        var ok = true;\n        closeStream = false;\n        out = new ByteArray();\n        try {\n            out.writeUTFBytes(\"GIF89a\"); // header\n        } catch (e) {\n            ok = false;\n        }\n\n        return (started = ok);\n    });\n\n    var cont = (exports.cont = function cont() {\n        reset();\n        var ok = true;\n        closeStream = false;\n        out = new ByteArray();\n\n        return (started = ok);\n    });\n\n    /**\n     * Analyzes image colors and creates color map.\n     */\n\n    var analyzePixels = function analyzePixels() {\n        var len = pixels.length;\n        var nPix = len / 3;\n        indexedPixels = [];\n        var nq = new NeuQuant(pixels, len, sample);\n\n        // initialize quantizer\n        colorTab = nq.process(); // create reduced palette\n\n        // map image pixels to new palette\n        var k = 0;\n        for (var j = 0; j < nPix; j++) {\n            var index = nq.map(\n                pixels[k++] & 0xff,\n                pixels[k++] & 0xff,\n                pixels[k++] & 0xff\n            );\n            usedEntry[index] = true;\n            indexedPixels[j] = index;\n        }\n\n        pixels = null;\n        colorDepth = 8;\n        palSize = 7;\n\n        // get closest match to transparent color if specified\n        if (transparent !== null) {\n            transIndex = findClosest(transparent);\n        }\n    };\n\n    /**\n     * Returns index of palette color closest to c\n     */\n\n    var findClosest = function findClosest(c) {\n        if (colorTab === null) return -1;\n        var r = (c & 0xff0000) >> 16;\n        var g = (c & 0x00ff00) >> 8;\n        var b = c & 0x0000ff;\n        var minpos = 0;\n        var dmin = 256 * 256 * 256;\n        var len = colorTab.length;\n\n        for (var i = 0; i < len; ) {\n            var dr = r - (colorTab[i++] & 0xff);\n            var dg = g - (colorTab[i++] & 0xff);\n            var db = b - (colorTab[i] & 0xff);\n            var d = dr * dr + dg * dg + db * db;\n            var index = i / 3;\n            if (usedEntry[index] && d < dmin) {\n                dmin = d;\n                minpos = index;\n            }\n            i++;\n        }\n        return minpos;\n    };\n\n    /**\n     * Extracts image pixels into byte array \"pixels\n     */\n\n    var getImagePixels = function getImagePixels() {\n        var w = width;\n        var h = height;\n        pixels = [];\n        var data = image;\n        var count = 0;\n\n        for (var i = 0; i < h; i++) {\n            for (var j = 0; j < w; j++) {\n                var b = i * w * 4 + j * 4;\n                pixels[count++] = data[b];\n                pixels[count++] = data[b + 1];\n                pixels[count++] = data[b + 2];\n            }\n        }\n    };\n\n    /**\n     * Writes Graphic Control Extension\n     */\n\n    var writeGraphicCtrlExt = function writeGraphicCtrlExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xf9); // GCE label\n        out.writeByte(4); // data block size\n        var transp;\n        var disp;\n        if (transparent === null) {\n            transp = 0;\n            disp = 0; // dispose = no action\n        } else {\n            transp = 1;\n            disp = 2; // force clear if using transparent color\n        }\n        if (dispose >= 0) {\n            disp = dispose & 7; // user override\n        }\n        disp <<= 2;\n        // packed fields\n        out.writeByte(\n            0 | // 1:3 reserved\n            disp | // 4:6 disposal\n            0 | // 7 user input - 0 = none\n                transp\n        ); // 8 transparency flag\n\n        WriteShort(delay); // delay x 1/100 sec\n        out.writeByte(transIndex); // transparent color index\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes Comment Extention\n     */\n\n    var writeCommentExt = function writeCommentExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xfe); // comment label\n        out.writeByte(comment.length); // Block Size (s)\n        out.writeUTFBytes(comment);\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes Image Descriptor\n     */\n\n    var writeImageDesc = function writeImageDesc() {\n        out.writeByte(0x2c); // image separator\n        WriteShort(0); // image position x,y = 0,0\n        WriteShort(0);\n        WriteShort(width); // image size\n        WriteShort(height);\n\n        // packed fields\n        if (firstFrame) {\n            // no LCT - GCT is used for first (or only) frame\n            out.writeByte(0);\n        } else {\n            // specify normal LCT\n            out.writeByte(\n                0x80 | // 1 local color table 1=yes\n                0 | // 2 interlace - 0=no\n                0 | // 3 sorted - 0=no\n                0 | // 4-5 reserved\n                    palSize\n            ); // 6-8 size of color table\n        }\n    };\n\n    /**\n     * Writes Logical Screen Descriptor\n     */\n\n    var writeLSD = function writeLSD() {\n        // logical screen size\n        WriteShort(width);\n        WriteShort(height);\n        // packed fields\n        out.writeByte(\n            0x80 | // 1 : global color table flag = 1 (gct used)\n            0x70 | // 2-4 : color resolution = 7\n            0x00 | // 5 : gct sort flag = 0\n                palSize\n        ); // 6-8 : gct size\n\n        out.writeByte(0); // background color index\n        out.writeByte(0); // pixel aspect ratio - assume 1:1\n    };\n\n    /**\n     * Writes Netscape application extension to define repeat count.\n     */\n\n    var writeNetscapeExt = function writeNetscapeExt() {\n        out.writeByte(0x21); // extension introducer\n        out.writeByte(0xff); // app extension label\n        out.writeByte(11); // block size\n        out.writeUTFBytes(\"NETSCAPE\" + \"2.0\"); // app id + auth code\n        out.writeByte(3); // sub-block size\n        out.writeByte(1); // loop sub-block id\n        WriteShort(repeat); // loop count (extra iterations, 0=repeat forever)\n        out.writeByte(0); // block terminator\n    };\n\n    /**\n     * Writes color table\n     */\n\n    var writePalette = function writePalette() {\n        out.writeBytes(colorTab);\n        var n = 3 * 256 - colorTab.length;\n        for (var i = 0; i < n; i++) out.writeByte(0);\n    };\n\n    var WriteShort = function WriteShort(pValue) {\n        out.writeByte(pValue & 0xff);\n        out.writeByte((pValue >> 8) & 0xff);\n    };\n\n    /**\n     * Encodes and writes pixel data\n     */\n\n    var writePixels = function writePixels() {\n        var myencoder = new LZWEncoder(\n            width,\n            height,\n            indexedPixels,\n            colorDepth\n        );\n        myencoder.encode(out);\n    };\n\n    /**\n     * Retrieves the GIF stream\n     */\n\n    var stream = (exports.stream = function stream() {\n        return out;\n    });\n\n    var setProperties = (exports.setProperties = function setProperties(\n        has_start,\n        is_first\n    ) {\n        started = has_start;\n        firstFrame = is_first;\n    });\n\n    return exports;\n};\n","import { ExtractedSpriteGroup, ExtractedSprite, ExtractedTile } from \"./types\";\nimport { renderTileToCanvas } from \"./renderTileToCanvas\";\n\nfunction getDimensions(\n    sprites: ExtractedSprite[]\n): { width: number; height: number } {\n    const maxX = Math.max(...sprites.map(s => s.composedX)) + 16;\n\n    const tiles = sprites.reduce<ExtractedTile[]>((building, sprite) => {\n        return building.concat(sprite.tiles);\n    }, []);\n\n    const maxY = Math.max(...tiles.map(t => t.composedY)) + 16;\n\n    return {\n        width: maxX,\n        height: maxY\n    };\n}\n\nfunction flip(\n    canvas: HTMLCanvasElement,\n    tile: ExtractedTile\n): HTMLCanvasElement {\n    const xScale = tile.horizontalFlip ? -1 : 1;\n    const yScale = tile.verticalFlip ? -1 : 1;\n    const translateX = tile.horizontalFlip ? canvas.width : 0;\n    const translateY = tile.verticalFlip ? canvas.height : 0;\n\n    const newCanvas = document.createElement(\"canvas\");\n    newCanvas.width = canvas.width;\n    newCanvas.height = canvas.height;\n\n    const context = newCanvas.getContext(\"2d\");\n\n    if (context) {\n        context.save();\n        context.translate(translateX, translateY);\n        context.scale(xScale, yScale);\n\n        context.drawImage(canvas, 0, 0);\n\n        context.restore();\n    }\n\n    return newCanvas;\n}\n\n// TODO: account for when sprites didn't compose right up to (0,0)\nexport function spriteGroupToCanvas(\n    spriteGroups: ExtractedSpriteGroup[],\n    animationCounter = 0,\n    width?: number,\n    height?: number\n): HTMLCanvasElement {\n    const sprites = spriteGroups.reduce<ExtractedSprite[]>(\n        (b, sg) => b.concat(sg.sprites),\n        []\n    );\n\n    const dimensions = getDimensions(sprites);\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width || dimensions.width;\n    canvas.height = height || dimensions.height;\n\n    const context = canvas.getContext(\"2d\");\n\n    const sortedSprites = [...sprites].sort(\n        (a, b) => a.spriteMemoryIndex - b.spriteMemoryIndex\n    );\n\n    sortedSprites.forEach(sprite => {\n        sprite.tiles.forEach(tile => {\n            let tileCanvas = document.createElement(\"canvas\");\n\n            let tileIndex = tile.tileIndex;\n\n            if (tile.autoAnimation === 3) {\n                // 3 bit auto animation: the 4th bit is set, indicating this tile does 3bit auto animation\n                // that means take its tileIndex, and replace its bottom three bits with those of the animation counter\n                tileIndex =\n                    (tileIndex & ~7) + ((tileIndex + animationCounter) & 7);\n            }\n            if (tile.autoAnimation === 2) {\n                // 2 bit auto animation: like above but replace its bottom two bits\n                tileIndex =\n                    (tileIndex & ~3) + ((tileIndex + animationCounter) & 3);\n            }\n\n            renderTileToCanvas(tileCanvas, tileIndex, tile.rgbPalette);\n\n            if (tile.horizontalFlip || tile.verticalFlip) {\n                tileCanvas = flip(tileCanvas, tile);\n            }\n\n            context!.drawImage(tileCanvas, sprite.composedX, tile.composedY);\n        });\n    });\n\n    return canvas;\n}\n","import { ExtractedSpriteGroup } from \"./types\";\n// @ts-ignore\nimport { GIFEncoder } from \"./jsgif/GIFEncoder\";\nimport { spriteGroupToCanvas } from \"./spriteGroupToCanvas\";\n\nconst TOTAL_FRAMES = 8;\n// loop set to zero means forever\nconst FOREVER = 0;\n\nexport function createGif(\n    spriteGroups: ExtractedSpriteGroup[],\n    width: number,\n    height: number,\n    delay: number\n): string {\n    // @ts-ignore\n    const encoder: any = new GIFEncoder();\n    encoder.setRepeat(FOREVER);\n    encoder.setDelay(delay);\n    encoder.setQuality(1);\n\n    encoder.start();\n\n    for (let i = 0; i < TOTAL_FRAMES; ++i) {\n        const frameCanvas = spriteGroupToCanvas(spriteGroups, i, width, height);\n        encoder.addFrame(frameCanvas.getContext(\"2d\")!);\n    }\n\n    encoder.finish();\n\n    const binaryData = encoder.stream().getData();\n\n    return `data:image/gif;base64,${btoa(binaryData)}`;\n}\n","import React, { useState } from \"react\";\nimport { useAppState } from \"../state\";\nimport { createGif } from \"../state/createGif_jsgif\";\n\nexport const BuildImage: React.FunctionComponent = () => {\n    const [dataUrl, setDataUrl] = useState<null | string>(null);\n    const [state] = useAppState();\n    const [width, setWidth] = useState(\"640\");\n    const [height, setHeight] = useState(\"256\");\n\n    return (\n        <div>\n            width\n            <input\n                value={width}\n                onChange={e => {\n                    setWidth(e.target.value || \"\");\n                }}\n                type=\"text\"\n            />\n            height\n            <input\n                value={height}\n                onChange={e => setHeight(e.target.value || \"\")}\n                type=\"text\"\n            />\n            <button\n                disabled={!width || !height}\n                onClick={() => {\n                    if (width && height) {\n                        const delay =\n                            window.Module._get_neogeo_frame_counter_speed() *\n                            16;\n                        const dataUrl = createGif(\n                            state.extractedSpriteGroups,\n                            Number(width),\n                            Number(height),\n                            delay\n                        );\n                        setDataUrl(dataUrl);\n                    }\n                }}\n            >\n                build gif\n            </button>\n            {dataUrl && <img src={dataUrl} />}\n        </div>\n    );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\nimport * as Space from \"react-spaces\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { Provider as AppStateProvider } from \"./state\";\nimport { Emulator } from \"./emulator\";\nimport { SpriteTray } from \"./spriteTray\";\nimport { ComposeScreen } from \"./composeScreen\";\nimport { BuildImage } from \"./gifBuilder/buildImage\";\n\nexport const App: React.FunctionComponent = () => {\n    return (\n        <AppStateProvider>\n            <DndProvider backend={HTML5Backend}>\n                <Space.ViewPort>\n                    <Space.TopResizable size=\"50%\">\n                        <Space.LeftResizable size=\"30%\">\n                            <Emulator />\n                        </Space.LeftResizable>\n                        <Space.Fill>\n                            <ComposeScreen />\n                        </Space.Fill>\n                        <Space.RightResizable size=\"30%\">\n                            <BuildImage />\n                        </Space.RightResizable>\n                    </Space.TopResizable>\n                    <Space.Fill>\n                        <SpriteTray />\n                    </Space.Fill>\n                </Space.ViewPort>\n            </DndProvider>\n        </AppStateProvider>\n    );\n};\n"],"sourceRoot":""}